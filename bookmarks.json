{"url":"http://startupclass.samaltman.com/","title":"How to Start a Startup","text":" > how to start a startup by sam altman follow @sama everything we know about how to start a startup, for free, from some of the world experts. sign up and join the community fall 2014 everything we know about how to start a startup, for free, from some of the world experts. cs183b is a class we’re teaching at stanford. it’s designed to be a sort of one-class business course for people who want to start startups. videos of the lectures, associated reading materials, and assignments will all be available here. there will be 20 videos, some with a speaker or two and some with a small panel. it’ll be 1,000 minutes of content if you watch it all. we’ll cover how to come up with ideas and evaluate them, how to get users and grow, how to do sales and marketing, how to hire, how to raise money, company culture, operations and management, business strategy, and more. you can’t teach everything necessary to succeed in starting a company, but i suspect we can teach a surprising amount. we’ve tried to take some of the best speakers from the past 9 years of y combinator dinners and arrange them in a way that will hopefully make sense. we’re doing this because we believe helping a lot of people be better at starting companies will be good for everyone. it will hopefully be valuable even for people who don’t want to start startups. talks like these have really helped y combinator founders create their companies. we hope you find it helpful too! -sam following along all lecture videos will be uploaded to this site - at 4 pm pacific time, after the in-person lectures every tuesday and thursday. hundreds of universities are organizing groups to watch the 50-minute videos together, as well as peer evaluate the projects. see the list of groups and viewing sessions at universities and other organizations . if there isn't a viewing session at your university or being hosted at a local organization, you can apply to be a leader . in addition to the mailing list and facebook group , a discussion forum to discuss the contents of each lecture and reading is here . course schedule readings posted through 10/14 , videos posted through 10/2 project 1 has been posted! submission will be on reddit you can submit questions to ask guest speakers during q&a. videos will be available on stanford's itunes u account at a 2-3 day delay date speaker topic 9/23/14 sam altman , president, y combinator dustin moskovitz , cofounder, facebook, cofounder, asana, cofounder, good ventures welcome, and ideas, products, teams and execution part i why to start a startup 9/25/14 sam altman , president, y combinator ideas, products, teams and execution part ii 9/30/14 paul graham , founder, y combinator counterintuitive parts of startups, and how to have ideas 10/2/14 adora cheung , founder, homejoy building product, talking to users, and growing 10/7/14 peter thiel , founder, paypal, founder, palantir, and founder, founders fund business strategy and monopoly theory 10/9/14 alex schultz , vp growth, facebook growth 10/14/14 kevin hale , founder, wufoo and partner, y combinator how to build products users love, part i 10/16/14 tba 10/21/14 marc andreessen , founder, andreessen horowitz and founder, netscape ron conway , founder, sv angel parker conrad , founder, zenefits how to raise money 10/23/14 alfred lin , former coo, zappos and partner, sequoia capital brian chesky , founder, airbnb company culture and building a team, part i 10/28/14 patrick and john collison , founders, stripe ben silbermann , founder & ceo, pinterest company culture and building a team, part ii 10/30/14 aaron levie , founder, box sales and marketing 11/4/14 reid hoffman , partner, greylock ventures and founder, linkedin tba 11/6/14 keith rabois , partner, khosla ventures how to operate 11/11/14 ben horowitz , founder, andreessen horowitz, and founder, and opsware how to manage 11/13/14 marissa mayer , ceo, yahoo tba 11/18/14 hosain rahman , founder, jawbone how to build products users love, part ii 11/20/14 kirsty nathoo and carolynn levy , partners, y combinator mechanics--legal, finance, hr, etc. 12/2/14 tba 12/4/14 sam altman , president, y combinator closing thoughts and later-stage advice > > ","createdAt":1412717704677,"_id":"IfnksHiDD6d2Kqcx"}
{"url":"http://differential.io/blog/tokenized-access-and-invited-use-in-meteor","title":"Differential | We Build Big Ideas","text":" ","createdAt":1412717704733,"_id":"zpTUH9QsT8IBeSyX"}
{"url":"http://book.discovermeteor.com/video/third-party-javascript","title":"Discover Meteor","text":" ","createdAt":1412717704767,"_id":"FdRwQWylGIcTyANi"}
{"url":"http://book.discovermeteor.com/video/sending-email","title":"Discover Meteor","text":" ","createdAt":1412717704769,"_id":"LBL3Q5ULlUBq3pmI"}
{"url":"http://book.discovermeteor.com/video/using-mixpanel","title":"Discover Meteor","text":" ","createdAt":1412717704769,"_id":"SK1y4NoFb69pxVcO"}
{"url":"http://book.discovermeteor.com/chapter/creating-a-meteor-package","title":"Discover Meteor","text":" ","createdAt":1412717704772,"_id":"QFjYYTghoYcmhs5M"}
{"url":"http://book.discovermeteor.com/video/using-appcache","title":"Discover Meteor","text":" ","createdAt":1412717704774,"_id":"4qmG4GAtKF8ASd5d"}
{"url":"https://mixpanel.com/","title":"Mixpanel | Mobile Analytics","text":" features pricing company log in sign up actions speak louder than page views. the most advanced analytics platform ever for mobile and the web. learn more try it for free see where you lose customers with funnels. use funnel analysis to increase conversions by showing where visitors get lost in any process. learn more improve retention. see if changes to your product or marketing improves customer retention. learn more get to know your customers. tie data to your customers so you can see who they are and what they have done in your app. learn more keep your customers. automatically send email or push notifications to your customers and increase engagement. learn more answer tough questions with mobile surveys. mobile surveys let you instantly ask your customers anything so you can finally answer the questions that have been difficult to measure. learn more the most advanced way to communicate with your customers. broadcast important messages to your customers. just upload an image, craft your message, and hit send. it's that simple. learn more experiment & surprise yourself with mobile a/b testing a/b testing gives you the power to test your idea like a science experiment. change the color of a button. edit the marketing copy. if you’re really ambitious, change the velocity in your game. learn more you're in good company. 2,675 to be specific. lessons learned from industry experts. we've asked some of our most innovative customers to share lessons learned, for the benefit of everyone. these talks cover a wide range of common challenges facing technology companies, and we hope you find them as enlightening to watch as we do. understand the first five minutes watch christine brumback (director of product @ fitbit) show how fitbit analyzed and improved. test your assumptions jessica (operations product manager @ airbnb) and vlad (growth product manager @ airbnb) talk about using analytics to test your core assumptions. learning analytics jace kohlmeier (dean of analytics @ khan academy) shares three examples of how they’ve applied analytics to help people learn. democratizing data danny hernandez speaks from personal experience as to how twitch.tv's changing data needs serve as a lesson for others. why our customers love us. i love @mixpanel's interfaces. so fresh so clean. 9:50am - october 22, 2012 james newton @jameswritescode @mixpanel blown away by the quality of your customer support. top notch. 8:00pm - october 10, 2012 luis sanz @lsanza it's insane how much better mixpanel is than google analytics. a piece of me dies setting up ga variables after tasting the bliss of mp. 3:13pm - november 20, 2012 daniel christopher @uxmonk @mixpanel is such a powerful analytics tool. if you are serious about customer engagement and retention, you should really check it out. 4:04pm - march 19, 2013 bart jacobs @_bartjacobs read more tweets... documentation blog jobs terms privacy support@mixpanel.com > > > > > > > ","createdAt":1412717704787,"_id":"eOMJzOHLsxm9rhpN"}
{"url":"http://www.computer.org/csdl/mags/cs/2000/01/c1022.html","title":"Guest Editors' Introduction: The Top 10 AlgorithmsGuest Editors' Introduction: The Top 10 Algorithms","text":" the community for technology leaders csdl institutions and libraries about resources rss feeds newsletter terms of use peer review login subscribe csdl home computing in science & engineering 2000 vol.2 issue no.01 - january/february subscribe guest editors' introduction: the top 10 algorithms (html) issue no.01 - january/february (2000 vol.2) pp: 22-23 published by the ieee computer society jack dongarra doi bookmark: http://doi.ieeecomputersociety.org/10.1109/mcise.2000.814652 abstract in putting together this issue of cise, we knew three things: it would be difficult to list just 10 algorithms; it would be fun to assemble the authors and read their papers; and, whatever we came up with in the end, it would be controversial. we tried to assemble the 10 algorithms with the greatest influence on the development and practice of science and engineering in the 20th century. following is our list (in chronological order): metropolis algorithm for monte carlo simplex method for linear programming krylov subspace iteration methods the decompositional approach to matrix computations the fortran optimizing compiler qr algorithm for computing eigenvalues quicksort algorithm for sorting fast fourier transform integer relation detection fast multipole method in putting together this issue of computing in science & engineering , we knew three things: it would be difficult to list just 10 algorithms; it would be fun to assemble the authors and read their papers; and, whatever we came up with in the end, it would be controversial. we tried to assemble the 10 algorithms with the greatest influence on the development and practice of science and engineering in the 20th century. following is our list (here, the list is in chronological order; however, the articles appear in no particular order): • metropolis algorithm for monte carlo • simplex method for linear programming • krylov subspace iteration methods • the decompositional approach to matrix computations • the fortran optimizing compiler • qr algorithm for computing eigenvalues • quicksort algorithm for sorting • fast fourier transform • integer relation detection • fast multipole method with each of these algorithms or approaches, there is a person or group receiving credit for inventing or discovering the method. of course, the reality is that there is generally a culmination of ideas that leads to a method. in some cases, we chose authors who had a hand in developing the algorithm, and in other cases, the author is a leading authority. in this issue monte carlo methods are powerful tools for evaluating the properties of complex, many-body systems, as well as nondeterministic processes. isabel beichl and francis sullivan describe the metropolis algorithm. we are often confronted with problems that have an enormous number of dimensions or a process that involves a path with many possible branch points, each of which is governed by some fundamental probability occurrence. the solutions are not exact in a rigorous way, because we randomly sample the problem. however, it is possible to achieve nearly exact results using a relatively small number of samples compared to the problem's dimensions. indeed, monte carlo methods are the only practical choice for evaluating problems of high dimensions. john nash describes the simplex method for solving linear programming problems. (the use of the word programming here really refers to scheduling or planning—and not in the way that we tell a computer what must be done.) the simplex method relies on noticing that the objective function's maximum must occur on a corner of the space bounded by the constraints of the \"feasible region.\" large-scale problems in engineering and science often require solution of sparse linear algebra problems, such as systems of equations. the importance of iterative algorithms in linear algebra stems from the simple fact that a direct approach will require o ( n 3 ) work. the krylov subspace iteration methods have led to a major change in how users deal with large, sparse, nonsymmetric matrix problems. in this article, henk van der vorst describes the state of the art in terms of methods for this problem. introducing the decompositional approach to matrix computations revolutionized the field. g.w. stewart describes the history leading up to the decompositional approach and presents a brief tour of the six central decompositions that have evolved and are in use today in many areas of scientific computation. david padua argues that the fortran i compiler, with its parsing, analysis, and code-optimization techniques, qualifies as one of the top 10 \"algorithms.\" the article describes the language, compiler, and optimization techniques that the first compiler had. the qr algorithm for computing eigenvalues of a matrix has transformed the approach to computing the spectrum of a matrix. beresford parlett takes us through the history of early eigenvalue computations and the discovery of the family of algorithms referred to as the qr algorithm. sorting is a central problem in many areas of computing so it is no surprise to see an approach to solving the problem as one of the top 10. joseph jaja describes quicksort as one of the best practical sorting algorithm for general inputs. in addition, its complexity analysis and its structure have been a rich source of inspiration for developing general algorithm techniques for various applications. daniel rockmore describes the fft as an algorithm \"the whole family can use.\" the fft is perhaps the most ubiquitous algorithm in use today to analyze and manipulate digital or discrete data. the fft takes the operation count for discrete fourier transform from o ( n 2 ) to o ( n log n ). some recently discovered integer relation detection algorithms have become a centerpiece of the emerging discipline of \"experimental mathematics\"—the use of modern computer technology as an exploratory tool in mathematical research. david bailey describes the integer relation problem: given n real numbers x 1 , ..., x n , find the n integers a 1 , ... , a n (if they exist) such that a 1 x 1 + ... + a n x n = 0. originally, the algorithm was used to find the coefficients of the minimal integer polynomial an algebraic number satisfied. however, more recently, researchers have used them to discover unknown mathematical identities, as well as to identify some constants that arise in quantum field theory in terms of mathematical constants. the fast multipole algorithm was developed originally to calculate gravitational and electrostatic potentials. the method utilizes techniques to quickly compute and combine the pair-wise approximation in o ( n ) operations. this has led to a significant reduction in the computational complexity from o ( n 2 ) to o ( n log n ) to o ( n ) in certain important cases. john board and klaus schulten describe the approach and its importance in the field. your thoughts? we have had fun putting together this issue, and we assume that some of you will have strong feelings about our selection. please let us know what you think. jack dongarra is a professor of computer science in the computer science department at the university of tennessee and a scientist in the mathematical science section of oak ridge national lab. he received his bs in mathematics from chicago state university, his ms in computer science from the illinois institute of technology, and his phd in applied mathematics from the university of new mexico. contact him at dongarra@cs.utk.edu; www.cs.utk.edu/~dongarra. francis sullivan is the associate editor-in-chief of cise and director of the institute for defense analyses' center for computing sciences. contact him at the ida/center for computing sciences, bowie, md 20715; fran@super.org.         full article pdf html rss feed subscribe citation ascii text bibtex refworks procite refman endnote > > 6 ms (ver 2.0) > > > > > > marketing automation platform ","createdAt":1412717704831,"_id":"HZwjtBNBsWxHOj0i"}
{"url":"http://viewmodel.meteor.com/#bindBk","title":"","text":" ","createdAt":1412717704883,"_id":"Cs18DkK21GuCjhlV"}
{"url":"https://www.youtube.com/watch?v=lKXe3HUG2l4","title":"\"The Mess We're In\" by Joe Armstrong - YouTube","text":" upload sign in search loading... this video is unavailable. > > watch queue tv queue watch queue tv queue remove all disconnect loading... watch queue tv queue __count__/__total__ loading... --> find out why close \"the mess we're in\" by joe armstrong strange loop subscribe subscribed unsubscribe 3,104 subscription preferences loading... loading... working... add to want to watch this again later? sign in to add this video to a playlist. sign in share more report statistics 21,817 409 like this video? sign in to make your opinion count. sign in 9 don't like this video? sign in to make your opinion count. sign in loading... loading... loading... sign in ratings have been disabled for this video. rating is available when the video has been rented. this feature is not available right now. please try again later. published on sep 19, 2014 joe armstrong is one of the inventors of erlang. when at the ericsson computer science lab in 1986, he was part of the team who designed and implemented the first version of erlang. he has written several erlang books including programming erlang software for a concurrent world. joe has a phd in computer science from the royal institute of technology in stockholm, sweden. category science & technology license creative commons attribution license (reuse allowed) remix this video show more show less loading... advertisement 51:55 play next play now garrett smith - why the cool kids don't use erlang by erlang solutions 2,305 views 42:12 play next play now \"the sociology of programming languages\" by leo meyerovich by strange loop 1,643 views 1:08:54 play next play now \"inside the wolfram language\" by stephen wolfram by strange loop 7,342 views 44:31 play next play now \"purescript (maybe this time we get javascript right)\" by bodil stokke by strange loop 3,900 views 45:01 play next play now \"transducers\" by rich hickey by strange loop 13,227 views 1:06:44 play next play now programming is terrible—lessons learned from a life wasted. emf2012 by thomas figg 495,683 views 36:15 play next play now \"react: restful ui rendering\" by pete hunt by strange loop 3,801 views 47:41 play next play now \"programming should eat itself\" by nada amin by strange loop 4,183 views 5:08 play next play now emily blunt seeks to understand testicle pain by team coco 966,660 views 47:34 play next play now commando: on the front line: episode 1 - the shock of capture by royalmarines 620,784 views 40:56 play next play now \"idris: practical dependent types with practical examples\" by brian mckenna by strange loop 2,801 views 46:36 play next play now \"our shared joy of programming\" by carin meier and sam aaron by strange loop 2,377 views 5:09 play next play now 10 clever ways to cheat on tests! [pictures] by tyt university 1,500,209 views 46:22 play next play now \"clojure in unity 3d: functional video game development\" by ramsey nasser and tims gardner by strange loop 2,778 views 44:47 play next play now \"jepsen ii: linearizable boogaloo\" by kyle kingsbury by strange loop 4,778 views 10:49 play next play now the islamic super state, the caliphate, is coming by secular zionist 32,039 views 41:10 play next play now \"consistency without consensus in production systems\" by peter bourgon by strange loop 1,170 views 15:01 play next play now malcolm gladwell: the strange tale of the norden bombsight by ted 127,212 views 8:10 play next play now extra credits - shovelware - the causes and consequences of bad licensed games by extra credits 138,589 views 54:58 play next play now the devil and god are raging inside me - brand new (full album, high quality) by maccrashfullalbums 27,994 views loading more suggestions... show more language: english country: worldwide safety: off help loading... loading... loading... about press & blogs copyright creators & partners advertising developers +youtube terms privacy policy & safety send feedback try something new! loading... working... sign in to add this to watch later add to > > > > > > > ","createdAt":1412717705045,"_id":"FwThSuGEv2qTW82Y"}
{"url":"http://blog.cloudflare.com/announcing-keyless-ssl-all-the-benefits-of-cloudflare-without-having-to-turn-over-your-private-ssl-keys/","title":"Announcing Keyless SSL™: All the Benefits of CloudFlare Without Having to Turn Over Your Private SSL Keys","text":" cloudflare cloudflare home how it works support login sign up announcing keyless ssl™: all the benefits of cloudflare without having to turn over your private ssl keys 18 sep 2014 by matthew prince . > tweet cloudflare is an engineering-driven company. this is a story we're proud of because it embodies the essence of who we are: when faced with a problem, we found a novel solution. technical details to follow but, until then, welcome to the no hardware world. (update: the post with the technical details is now online.) fall in san francisco the story begins on a saturday morning, in the fall of 2012, almost exactly two years ago. i got a call on my cell phone that woke me. it was a man who introduced himself as the chief information security officer (ciso) at one of the world's largest banks. \"i got your number from a reporter,\" he said. \"we have an incident. could you and some of your team be in new york monday morning? we'd value your advice.\" we were a small startup. of course we were going to drop everything and fly across the country to see if we could help. i called john roberts and sri rao, two members of cloudflare's team. john had an air of calm about him and owned more khaki pants than any of the rest of us. sri was a senior member of our technical operations team and could, already at that point, justifiably claim he'd essentially \"seen it all\" in the two years he'd spent keeping cloudflare's network online. sunday night we packed into a plane to new york. en route i made sri promise he wouldn't wear cargo shorts to the meeting with the bank executives the next day. and he didn't. instead, we all showed up in ill-fitting suits like the out-of-place engineers that we were. rock and the hard place at the meeting the bankers explained the rock and the hard place they were between. on one side they were under attack. as the new york times and other publications have subsequently reported, in the fall of 2012 allegedly iranian hackers systematically launched ddos attacks that crippled major us financial institutions. the bankers related that the attacks, which were between 60 - 80gbps (far shy of the 500gbps+ attacks we regularly see today), were sufficient to cripple their on-premise network hardware solutions. the multiple banks that we visited that day told us the same story. whether it was their load balancer, their firewall, their router, or their switch, under attack, something had become saturated and was unable to keep up with the traffic. it didn't matter how clever the software on the device was, in every case they were dead at layer 3. if that was the rock, what was the hard place? the bankers all acknowledged what they needed was a cloud-based solution that could scale to meet the challenges they faced. unfortunately, since they needed to support encrypted connections, that meant the cloud-based solution needed to terminate ssl connections. and there was the rub. the key is the (ssl) key an ssl key is the data that allows an organization to establish a secure connection with the customers that connect to it. it is also the data that lets an organization establish its identity. if you have an organization private ssl key, you can authenticate as if you were it. you can spoof identity and intercept traffic. if, say, a media organization loses an ssl key, it's a very bad day. if a financial institution loses one, it's a nightmare. in addition to the public embarrassment and loss of trust, in the united states, the bankers we met with that fall day in 2012 told us, if an ssl key is lost it's a critical security event that must be reported to the federal reserve. other vendors have tried to deal with this by, what several of the bankers we met with, termed: \"security theater.\" they show you pictures of big, locked racks of servers with electronic combination locks. we came away from that day of meetings in new york with one conclusion: the only way organizations that had the highest standards of ssl security could ever adopt the benefits of the cloud is if we never took possession of their ssl keys. sri, john, and i returned to san francisco somewhat disheartened. i relayed what we'd learned to our engineering team. everyone was bummed for a bit. then, sebastien pahl, one of our engineers who had previously helped build dotcloud and docker, said, \"do we really need to have physical access to the private key?\" that spawned a late evening in the office in front of several white boards. we'd speculated previously that there was a way to split session signing, the only part of the ssl handshake that requires the private key, from rest of the process. sebastien pulled up the documentation on his phone and was convinced that there was a way to do it. over the course of the night, he convinced the rest of us. creative engineers ftw sebastien is the kind of engineer that, when he's transfixed with a problem, can't sleep. it's a trait we hire for at cloudflare. he showed up the next morning looking both exhausted and excited. \"i've proven it's possible,\" he said. \"it's crude. it won't scale. it probably has security vulnerabilities galore, but i've proved we can terminate ssl connections even if we don't have physical access to the private ssl key.\" tomorrow, we'll publish a full post on the nitty, gritty techical details of how, what has come to be called keyless ssl™, works. (update: the post with the technical details is now online.) for now, i'll just tell you about what sebastien had built. it was a dramatic demo. a simple agent ran on a raspberry pi. a web server, running on a remote server on cloudflare's network, received https connections. when the raspberry pi was plugged in, the connections went through from a browser as they would normally. the lock appeared and the connection was secured, end-to-end. the minute the raspberry pi's power was disconnected, https access terminated. sebastien had proven that the solution to what the banks needed was possible: you could have ssl keys remote from the actual server terminating the connection. if that worked, there was no need to ever have limited on-premise network hardware again. provide the functionality in the infinitely scalable environment of the cloud, but keep the keys on-premise so there's no risk they are ever misappropriated. a prototype made in an evening is one thing, having something production ready is another. sebastien turned the project over to john graham-cumming, piotr sikora, and nick sullivan, three of the lead engineers on our team. they worked with the banks that had originally contacted us to build a system that worked in high availability environments. to make it work, we needed to hold connections open between cloudflare's network and agents running on our customers' infrastructure. moreover, we needed to share data about crytographic sessions setup for a visitor between all the machines that could serve that visitor. making it work was one thing, making it fast was another. and, today, keyless ssl clients are experiencing 3x+ faster ssl termination globally using the service than they were when they were relying only on on-premise solutions. tomorrow nick sullivan will spend time going through the details of how keyless ssl works. for now know this: private clouds are an oxymoron. keeping your network behind on-premise hardware you control is a recipe for disaster. over time, the network edge needs the infinite scalability and elastacity that only a service like cloudflare can provide. and, now, with keyless ssl, anyone can get that flexibility without having to turn over their most guarded secrets: their private ssl keys. here's what people are saying about keyless ssl: security world-renowned security experts jon callas and phil zimmermann support cloudflare's latest announcement sharing, “one of the core principles of computer security is to limit access to cryptographic keys to as few parties as possible, ideally only the endpoints. application such as pgp, silent circle, and now keyless ssl implement this principle and are correspondingly more secure.” a spokesperson from ncc group’s cryptography services practice commented: “we’ve seen how private keys can be stolen, and investing in techniques to limit their exposure makes the internet a safer place. our review of keyless ssl indicates the keys themselves do not leave your infrastructure, and a secure channel with cloudflare both protects the communication and reduces the attack surface for your key.” \"because this system keeps your long-lived ssl private keys on-premise, it provides the same protection to those keys as conventional on-premise ssl solutions. this provides the security and performance benefits of managing ssl traffic in the cloud.\" explained jian jiang, independent academic researcher at uc berkeley enterprise senior director of trust at emc corporation, davi ottenheimer believes keyless ssl is a fundamental innovation in security. “everyone should be increasingly aware and concerned about the risks of handing their private keys over to service providers. the trade-offs between control and services are being solved by innovation in key management. keyless solutions, where customers retain control, clearly improve security while maintaining the best service offerings. as we move to a more interconnected world with more localized-access to global providers, our trust has to be based on security controls that remain relevant within the latest advances of content delivery networks. keeping control of your own private key, yet enabling a service provider to serve your customers with the same level of trust, is a real breakthrough in content delivery security.” “recent incidents like the apt exploit of heartbleed to breach community health systems and the mask operation show that attacks on keys and certificates that establish trust are on the rise. if security teams don’t protect their keys and certificates they undermine their critical threat protection and existing security controls,” said kevin boeck, vice president of security strategy & threat intelligence at venafi. “with our partner cloudflare, venafi supports the development of keyless ssl technology to help further protect our venafi trust protection platform customers and secure their use of cloud services.” financial “at coinbase, we take security very seriously. to be successful in the bitcoin ecosystem we prioritize security highly,” said ryan mcgeehan, director of security at coinbase. “technology that improves the security of our critical infrastructure, like our ssl keys, is always welcomed.\" “as a private-cloud file-sync and share startup working with many financial organizations worldwide, we are always looking for the best security technologies that help keep important data safe, secure, and behind the firewall while maintaining the scale benefits of the cloud,” said yuri sagalov, co-founder and ceo of aerofs. “keyless ssl lets companies get the best of both worlds: companies get to keep their private keys behind the corporate firewall where they belong, while still providing edge-level encryption for their customers accessing their services. want to learn more about cloudflare? learn more comments > please enable javascript to view the comments powered by disqus. comments powered by disqus > > > > cloudflare blog contact our team us callers 1 (888) 99-flare uk callers +44 (0)20 3514 6970 international callers +1 (650) 319-8930 full feature list and plan types cloudflare provides performance and security for any website. more than 2 million websites use cloudflare. there is no hardware or software. cloudflare works at the dns level. it takes only 5 minutes to sign up. to learn more, please visit our website cloudflare features overview cdn optimizer security analytics apps network map system status subscribe via rss what we do plans features apps network community case studies blog partners developers support help center system status contact us about us team careers press legal connect twitter facebook google+ rss all content © 2014 cloudflare . proudly published with ghost . > > > > ","createdAt":1412717705169,"_id":"RzTrLlmBeIJtSniY"}
{"url":"https://www.youtube.com/watch?v=6mTbuzafcII","title":"\"Transducers\" by Rich Hickey - YouTube","text":" upload sign in search loading... this video is unavailable. > > watch queue tv queue watch queue tv queue remove all disconnect loading... watch queue tv queue __count__/__total__ loading... --> find out why close \"transducers\" by rich hickey strange loop subscribe subscribed unsubscribe 3,104 subscription preferences loading... loading... working... add to want to watch this again later? sign in to add this video to a playlist. sign in share more report statistics 13,677 224 like this video? sign in to make your opinion count. sign in 1 don't like this video? sign in to make your opinion count. sign in loading... loading... loading... sign in ratings have been disabled for this video. rating is available when the video has been rented. this feature is not available right now. please try again later. published on sep 19, 2014 people keep implementing map, filter and other fundamental algorithms in different contexts - eagerly over collections, over lazy sequences, in parallel, over enumerables/iterables, over observables, over channels/streams etc. in addition to duplication of effort, this yields bloated apis, and, when implemented in the classic way, often involves the creation of expensive intermediate objects/values that can be difficult to optimize away. most problematic is that this approach keeps us from composing core algorithms in a context-independent way which would facilitate reuse and engender greater flexibility. this talk will describe transducers, a new library feature for clojure (but of interest to other languages) that emphasizes composable, context-free, intermediate-free notions like 'mapping' and 'filtering' and their concrete reuse across all of the contexts above. by rich hickey (@richhickey) - cognitect rich hickey, the author of clojure and designer of datomic, is a software developer with over 25 years of experience in various domains. rich has worked on scheduling systems, broadcast automation, audio analysis and fingerprinting, database design, yield management, exit poll systems, and machine listening, in a variety of languages. rich is cto of cognitect, inc. category science & technology license creative commons attribution license (reuse allowed) remix this video show more show less loading... advertisement 44:59 play next play now \"linux sucks\" - 2014 by bryan lunduke 326,905 views 1:08:54 play next play now \"inside the wolfram language\" by stephen wolfram by strange loop 7,342 views 45:50 play next play now \"the mess we're in\" by joe armstrong by strange loop 21,153 views 47:41 play next play now \"programming should eat itself\" by nada amin by strange loop 4,183 views 53:38 play next play now steve jobs lost interview 1990 - a must watch for any entreprenuer by foundups michael trout 1,207,075 views 1:48:13 play next play now clojure for java programmers part 1 - rich hickey by clojuretv 26,527 views 46:36 play next play now \"our shared joy of programming\" by carin meier and sam aaron by strange loop 2,377 views 40:56 play next play now \"idris: practical dependent types with practical examples\" by brian mckenna by strange loop 2,801 views 253 videos play all play now clojure by michael mullis 1:02:01 play next play now cs education zoo #5 - david nolen by william byrd 402 views 1:02:50 play next play now the language of the system - rich hickey by clojuretv 35,557 views 25:57 play next play now scott hanselman, \"virtual machines, javascript and assembler\" - fluent 2014 keynote by o'reilly 51,482 views 36:54 play next play now rails conf 2012 keynote: simplicity matters by rich hickey by confreaks 35,044 views 37:08 play next play now \"dynamic programming at ease - with grammars, algebras, products\" by stefanie schirmer by strange loop 732 views 42:02 play next play now programming elixir: the magic of today's tonic by linux.conf.au 2014 -- perth, australia 1,520 views 31:30 play next play now van halen - diver down (full album) 1982 by nascardude53 65,589 views 41:46 play next play now \"a core.async debugging toolkit\" by david mcneil by strange loop 741 views 1:22:12 play next play now the avett brothers - the full audio set - live in concert at newport folk festival july 2013 by miss moremusic 81,881 views 4:54 play next play now 2015 honda fit review by motormouth canada 7,255 views 9:01 play next play now jeff beck & jimmy page-beck's bolero,immigrant song,train kept a rollin' by joe zee 1,109,218 views loading more suggestions... show more language: english country: worldwide safety: off help loading... loading... loading... about press & blogs copyright creators & partners advertising developers +youtube terms privacy policy & safety send feedback try something new! loading... working... sign in to add this to watch later add to > > > > > > > ","createdAt":1412717705515,"_id":"iotY0OHmens6vpYv"}
{"url":"https://medium.com/@ayanonagon/the-y-combinator-no-not-that-one-7268d8d9c46","title":"The Y Combinator (no, not that one) — Medium","text":" home search collections sign in or create an account medium site navigation ayaka nonaka on sep 10 10 min info history publish change the title or subtitle to customize how your story is presented across medium. don’t write alone copy and send this draft link to anyone. they’ll be able to leave you notes before you publish. set as featured in collection the y combinator (no, not that one) a crash-course on lambda calculus what do you think of when you hear “y combinator”? if you’re like most of us, you’d probably think of the venture capital company based in mountain view, california. well, here is the original y combinator: λf. (λx. f (x x))(λx. f (x x)) please, please don’t run away. there’s a reason why silicon valley’s y combinator is named after this. it’s actually kind of awesome. (kudos to them for picking a cool name.) to understand what λf. ( λx . f ( x x ))( λx. f ( x x )) means and what it can do, we’ll first need to learn the basics of lambda calculus . if you’re interested in functional programming or are curious about it, i think you might enjoy it. don’t worry if you don’t fully understand it after your first read-through; the article won’t disappear! lambda calculus lambda calculus (or λ-calculus ) was invented by alonzo church in 1930 as a formal system for expressing computation. although it has the word “calculus” in it, it is far from related to the calculus that newton and leibniz invented. in fact, it is a lot closer to programming than mathematics as most of us know it. valid λ-calculus expressions can be defined inductively as follows: a variable x is a valid λ-term. if t is a valid λ-term and x is a variable, then λ x . t is a valid λ-term. if t and s are both valid λ-terms, then t s is a valid λ-term. maybe that made sense, maybe it didn’t. if you’re anything like me, you might like learning through examples. so let’s build up a few λ-terms from scratch. we’ll talk about what these λ-terms mean after we have a few of them to work with. based on #1 (“a variable x is a valid λ-term.”), we can build these λ-terms: x y okay, that wasn’t that bad. let’s see what we can do with #2 (“if t is a valid λ-term and x is a variable, then λ x. t is a valid λ-term.”). having x and y as valid λ-terms in our pocket, we can now create: λ x. x λ y. y λ x. y λ y. x and with #3 (“if t and s are both valid λ-terms, then t s is a valid λ-term.”), we can create: x x x y (λ x. x) y (λ y. y) x ( λ x. x) ( λ x. x) ( λ y. y) ( λ x. x) … as an exercise, try writing down some of your own λ-terms. let’s take a look at some of the λ-terms that we’ve created. λ x. x is known as the identity function . the x that is bolded in λ x . x can be interpreted as the input, and the x that is bolded in λ x . x can be interpreted as the output. that is, it takes in some input x , and outputs the same x. if you’ve played around with languages that support lambdas, like ruby, you might have seen it written like: i = ->(x) { x } (if you squint a little, you might notice that - > kind of looks like λ.) what about λ x. y? that is known as the constant function , since it ignores the input x and returns y no matter what. c = ->(x) { y } you might ask, “isn’t λ y. y also the identity function?” indeed it is! λ x. x and λ y. y are α-equivalent (alpha-equivalent). in fact, all of the following are α-equivalent: λ x. x λ y. y λ z. z λ☃ . ☃ this leads us to the discussion of bound vs. free variables. bound vs. free variables a bound variable is a variable that occurs in the body of a λ with an argument of the same name. a free variable is a variable that is not a bound variable. for example , x is a bound variable in λ x. x , but a free variable in (λ y. y) x. what’s special about bound variables is that you can rename them, as long as you do so consistently. if two λ-terms are the same up to renaming of bound variables, they are α-equivalent . let’s take a look at an example in code. m = ->(horrible_variable_name) { horrible_variable_name * y } in the above example, it’s safe to rename horrible_variable_name ( a bound variable ) to another name like x. m = ->(x) { x * y } but you can’t just go and rename y , because it’s defined outside of the scope. maybe y is defined as the number 2, and m is a function that multiplies its input by 2. if we went and renamed it to z (let’s say it’s defined to be 0), m would turn into a function that always returns 0. function application okay, awesome. we have functions. but how do you do stuff with them? that’s where rule #3 comes into play. if t and s are both valid λ-terms, then t s is a valid λ-term. (λ x. x) y is an example of a function application . more concretely, it represents the act of calling the function λ x. x with y as an input . you can reduce a function application using β-reduction (beta-reduction) . the rules of β-reduction say that a term (λ x. t) s can be reduced to t [x := s], which reads “ t where all bound occurrences of x in t are substituted for s .” for example, you can β-reduce (λ x. x) s to just s by replacing all bound occurrences of x in the body ( which just happens to be x in this case ) with s, which gets us s. line by line, it looks like this: (λ x. x) s x [x := s] s and there, we see that λ x. x does exactly what we would expect the identity function to do. it’s also worth mentioning that you can define functions that take in more than one argument based on the inductive definition of λ - terms. for example, take a look at the following term: λ y.( λ x. x) y … and feed it two inputs, a and b : (λ y.( λ x. x) y) a b (( λ x. x) y) [y := a]) b ( λ x. x) a b (x [x := a]) b a b it’s important to note here that function application is left-associative. that is, (λ y.( λ x. x) y) a b = ( (( λ y.( λ x. x) y) a) b) now take a look at the following λ- term: (λ x. x x)( λ x. x x) what happens when you apply β-reduction to it? (λx. x x )( λx. x x ) ( x x ) [ x := ( λx. x x ) ] (λx. x x )( λx. x x ) wait. did we just end up where we started? you have just discovered ω (omega) , a divergent combinator. a λ-expression is divergent if it has no β-normal form. a λ-expression exhibits β-normal form if no β-reduction can be applied to it. a combinator is a λ-expression that contains no free variables. isn’t infinite recursion such a curiosity? speaking of recursion, how can we define something like the factorial function in λ-calculus? in simple ruby, it might look something like: def fact(n) if n == 0 1 else n * fact(n-1) end end what’s special about this function? it refers to itself. you might say, “doh, that’s just recursion.” well, you might be shocked to hear that λ-calculus does not allow this kind of self-reference, at least not directly. self-reference is such a simple yet powerful concept that allows curiosities like the statement below come into existence: this statement is false. is that statement true? if it is, it’s false. then is that statement false? if it is, it’s true. how about: the statement below is true. the statement above is false. if this intrigues you at all, i recommend reading douglas hofstadter’s book, gödel, escher, bach . i’m only about halfway through it so far, but it’s like wandering through a labyrinth of escher’s drawings themselves. trust me, it’s worth getting lost—but i digress. print gallery ( m. c. escher) so, how do we achieve self-reference without self-reference? i think we might be ready to revisit our mysterious friend, the y combinator. the y combinator, at last here it is again: λ f . (λ x . f ( x x ))(λ x . f ( x x )) hopefully it looks a little more familiar to you now. now back to the factorial function. if functions were allowed to reference themselves, we could have something of the form: f := λ x .(if x == 0 then 1 else x * f ( x –1)) but we already know that we’re not allowed to do this. instead, let’s take a step back and try something different. let’s define a well-behaved λ-expression f that takes in f as an argument: f := λ f. λ x.( if x == 0 then 1 else x * f (x –1 )) but what can we do with f on its own? we need something to kick-start f by providing a value for the the parameter f . furthermore, we want p such that fp is equivalent to p . this is both because p is the value that we are passing into the λ-expression as the value for f (i.e. the pseudo-recursive function), and because we want fp to do the same thing that p would have done on its own had it been allowed to refer to itself, instead of being passed in as a parameter. that part just now was the trickiest part for me to grasp, and it also happens to be the part where we very sneakily introduce self-reference without direct self-reference, so make sure you understand why we want fp to be equivalent to p before we move on. feel free to give the paragraph at least another read. in other words, we want to find a fixed-point of f. a fixed-point of a function in mathematics is an input that is unchanged by that function. for example, for f ( x ) = x * x , there are two fixed-points: 0 and 1. if we can find a fixed-point p of f such that fp is equivalent to p , we can use fp or p ( they are the same thing ) as the “recursive” function without direct self-reference. it turns out that for any λ-expression f , (λ x. f (x x))( λ x. f (x x)) is a fixed-point of f . let’s see that in action: x = (λx . f ( x x ))( λx . f ( x x )) x = f ( x x ) [ x := λ x . f ( x x )] x = f (( λx . f ( x x )) ( λx . f ( x x ))) x = f x as you can see, for any arbitrary function f, the input x remains unchanged. given this, we can build a function that returns a fixed-point for any function f by taking the function in as an argument: λf . ( λx . f ( x x ))( λx . f ( x x )) and that right there is the y combinator. it’s a function that will return a fixed-point for any input function f . let’s call it y. for any function f , yf is a fixed-point of f. that is, f(yf) is equivalent to yf. in fact, another name for the y combinator is the fixed-point combinator for this reason. we just found that we can set p = yf to satisfy our requirement that fp is equivalent to p. to kick-start the function, we can now provide p as an input to f to get f(yf), which is equivalent to just yf, and we’re ready to roll. let’s see what happens if you plug in our λ-expression for factorial as f and feed it the input 3 to compute the value of 3 factorial. yf 3 f(yf) 3 λ f. λ x.( if x == 0 then 1 else x * f (x –1 )) (yf) 3 λ x.( if x == 0 then 1 else x * (yf)(x –1 )) 3 if 3 == 0 then 1 else 3 * ( yf)( 3–1 ) 3 * ( yf) 2 3 * f(yf) 2 3 * ( λ f. λ x.( if x == 0 then 1 else x * f (x –1 )) (yf) 2) 3 * ( λ x.( if x == 0 then 1 else x * ( yf)(x –1 )) 2) 3 * ( if 2 == 0 then 1 else 2 * ( yf)( 2–1 )) 3 * ( 2 * (yf) 1 ) 6 * (yf) 1 6 * f(yf) 1 6 * (λ f. λ x.( if x == 0 then 1 else x * f (x –1 )) (yf) 1) 6 * (λ x.( if x == 0 then 1 else x * ( yf)(x –1 )) 1 ) 6 * ( if 1 == 0 then 1 else 1 * ( yf)( 1–1 )) 6 * (yf) 0 6 * f(yf) 0 6 * (λ f. λ x.( if x == 0 then 1 else x * f (x –1 )) (yf) 0 ) 6 * ( if 0 == 0 then 1 else 0* ( yf)( 0–1 )) 6 * 1 6 … and there you have it. 3! = 6 that’s all i have to say. waterfall ( m. c. escher) if you’ve made it this far, i hope you’ve learned something. i’m an ios engineer by trade, but i think it’s fun to think about these things for a change of pace and perspective. if you have any questions or comments, feel free to leave them here or find me @ayanonagon on twitter. thanks for reading! p. s. if you like it, recommend it. ❤ notes special thanks to brent yorgey for teaching me λ-calculus in cis 399 , fall 2012. easily one of my favorite classes i’ve ever taken. i took some shortcuts like using if-else statements for the sake of readability, but these can be defined using λ-calculus as shown here if you want to be more pedantic. you might need to read this article more than once to fully grasp some of the concepts. it might help to read through the wikipedia article too, although it’s a little dense. if you enjoyed this, you should look into haskell (the official haskell website even has a section dedicated to λ-calculus ) or some other functional language (scheme, ocaml) or functional-flavored language (ruby, python, swift). ayaka nonaka follow author share email me when ayaka nonaka publishes or recommends stories follow > ","createdAt":1412717705631,"_id":"2MyKjEefT8V8R61F"}
{"url":"http://thenews.im/","title":"The News","text":" try bugherd! --> another project by ahmetsulek tweet > designer news hacker news designer news 1 introducing carrot 40 points by chrisarchitec t | 12 comments 2 squarespace seven 27 points by jacob cummings | 2 comments 3 turndownforwhat.js 22 points by matt achariam | 7 comments 4 show dn: highfive - video conferencing you can actually love 20 points by robbert esser | 7 comments 5 flinto customer profile: collective ray 8 points by nathan manousos | 2 comments 6 github student pack—the best developer tools, now free for students 7 points by matt achariam | 2 comments 7 show dn: adobe shape cc, capture shapes with your iphone and save them as vectors 24 points by franois briod | 10 comments 8 site design: digital telepathy's new homepage 7 points by cody iddings | 1 comments 9 ux and ui designers, how do you work with each other? 11 points by aaron tenbuuren | 21 comments 10 the future of adobe tools 11 points by luke moderwell | 11 comments 11 free stock images & videos 13 points by catalin cimpanu | 9 comments 12 litmus builder: a code editor for email design & development 5 points by kevin mandeville | 4 comments 13 he's a designer and windows 10 was his idea 9 points by victor ware | 2 comments 14 new soundcloud layout makes me sad 6 points by gatan rochel | 15 comments 15 kirby 2 has been released! 8 points by seth kasky | 1 comments 16 a story about jessica 20 points by daniel fosco | 10 comments 17 web design portfolios 3 points by annie ruygt | 2 comments 18 ask dn: did you write your personal/portfolio text yourself? 7 points by martin broder | 15 comments 19 three principles of success from a killer self-funded company 4 points by michael sacca | 2 comments 20 card page the intelligent way to pay—plastc 4 points by matt achariam | 2 comments hacker news 1 hacker news api 701 points by | 173 comments 2 github student developer pack 497 points by | 142 comments 3 plastc card 227 points by | 151 comments 4 show hn: speeding up postgresql through vectorized execution 55 points by | 1 comments 5 twitter sues u.s. government over surveillance disclosure 204 points by | 46 comments 6 rust means never having to close a socket 186 points by | 100 comments 7 show hn: readme.io, beautiful documentation made easy 135 points by | 56 comments 8 the limits of friendship 16 points by | 10 comments 9 sqlite 3.8.7 is 50% faster thanks to hundreds of micro-optimizations 450 points by | 1385123 comments 10 interview with brad cox, the man behind objective-c 15 points by | 3 comments 11 a beautiful replacement for javascript's “alert” 239 points by | 87 comments 12 interana (yc w13) promises facebook-style analytics for everyone 28 points by | 1 comments 13 the seven deadly sins of “talking about types” 104 points by | 50 comments 14 meteor acquires yc alum fathomdb for its development platform 32 points by | 5 comments 15 project oxcart (sr-71) and the beginnings of information warfare [pdf] 12 points by | 18 comments 16 a neighborhood garbageman explains modern egypt 61 points by | 41 comments 17 the led's dark secret 62 points by | 31 comments 18 show hn: javascript battle – a daily artificial intelligence battle 96 points by | 19 comments 19 finding a video poker bug made these guys rich 144 points by | 120 comments 20 nobel price in physics for the inventors of efficient blue light-emitting diodes 217 points by | 47 comments more less another project by ahmetsulek > > > > > > ","createdAt":1412717705779,"_id":"DL8cOOFA4G4Ggg3P"}
{"url":"https://www.ruby-lang.org/en/documentation/quickstart/","title":"Ruby in Twenty Minutes","text":" ruby a programmer's best friend home downloads documentation libraries community news security about ruby menu 1 | 2 | 3 | 4 ruby in twenty minutes introduction this is a small ruby tutorial that should take no more than 20 minutes to complete. it makes the assumption that you already have ruby installed. (if you don’t have ruby on your computer download and install it before you get started.) interactive ruby ruby comes with a program that will show the results of any ruby statements you feed it. playing with ruby code in interactive sessions like this is a terrific way to learn the language. open up irb (which stands for interactive ruby). if you’re using mac os x open up terminal and type irb , then hit enter. if you’re using linux , open up a shell and type irb and hit enter. if you’re using windows , open fxri from the ruby section of your start menu. irb ( main ): 001 : 0 > ok, so it’s open. now what? type this: \"hello world\" irb ( main ): 001 : 0 > \"hello world\" => \"hello world\" ruby obeyed you! what just happened? did we just write the world’s shortest “hello world” program? not exactly. the second line is just irb’s way of telling us the result of the last expression it evaluated. if we want to print out “hello world” we need a bit more: irb ( main ): 002 : 0 > puts \"hello world\" hello world => nil puts is the basic command to print something out in ruby. but then what’s the => nil bit? that’s the result of the expression. puts always returns nil, which is ruby’s absolutely-positively-nothing value. your free calculator is here already, we have enough to use irb as a basic calculator: irb ( main ): 003 : 0 > 3 + 2 => 5 three plus two. easy enough. what about three times two? you could type it in, it’s short enough, but you may also be able to go up and change what you just entered. try hitting the up-arrow on your keyboard and see if it brings up the line with 3+2 on it. if it does, you can use the left arrow key to move just after the + sign and then use backspace to change it to a * sign. irb ( main ): 004 : 0 > 3 * 2 => 6 next, let’s try three squared: irb ( main ): 005 : 0 > 3 ** 2 => 9 in ruby ** is the way you say “to the power of”. but what if you want to go the other way and find the square root of something? irb ( main ): 006 : 0 > math . sqrt ( 9 ) => 3 . 0 ok, wait, what was that last one? if you guessed, “it was figuring out the square root of nine,” you’re right. but let’s take a closer look at things. first of all, what’s math ? modules group code by topic math is a built-in module for mathematics. modules serve two roles in ruby. this shows one role: grouping similar methods together under a familiar name. math also contains methods like sin() and tan() . next is a dot. what does the dot do? the dot is how you identify the receiver of a message. what’s the message? in this case it’s sqrt(9) , which means call the method sqrt , shorthand for “square root” with the parameter of 9 . the result of this method call is the value 3.0 . you might notice it’s not just 3 . that’s because most of the time the square root of a number won’t be an integer, so the method always returns a floating-point number. what if we want to remember the result of some of this math? assign the result to a variable. irb ( main ): 007 : 0 > a = 3 ** 2 => 9 irb ( main ): 00 8 : 0 > b = 4 ** 2 => 16 irb ( main ): 00 9 : 0 > math . sqrt ( a + b ) => 5 . 0 as great as this is for a calculator, we’re getting away from the traditional hello world message that beginning tutorials are supposed to focus on… so let’s go back to that. get started , it's easy! try ruby! (in your browser) ruby in twenty minutes ruby from other languages explore a new world… documentation books libraries success stories participate in a friendly and growing community. mailing lists : talk about ruby with programmers from all around the world. user groups : get in contact with rubyists in your area. weblogs : read about what’s happening right now in the ruby community. ruby core : help polish the rough edges of the latest ruby. issue tracking : report or help solve issues in ruby. syndicate recent news (rss) downloads documentation libraries community news security about ruby this site in other languages: български , deutsch , english , español , français , bahasa indonesia , italiano , 日本語 , 한국어 , polski , português , русский , türkçe , tiếng việt , 简体中文 , 繁體中文 . this website is proudly maintained by members of the ruby community. > ","createdAt":1412717705793,"_id":"nfkQBi5FutCgR5FW"}
{"url":"https://github.com/ManuelDeLeon/viewmodel","title":"ManuelDeLeon/viewmodel · GitHub","text":" manueldeleon/viewmodel · github skip to content sign up sign in this repository explore features enterprise blog star 14 fork 0 manueldeleon / viewmodel code issues pull requests pulse graphs https clone url subversion checkout url you can clone with https or subversion . download zip mvvm for meteor 7 commits 1 branch 0 releases fetching contributors coffeescript 97.1% javascript 2.9% coffeescript javascript branch: master switch branches/tags branches tags master nothing to show nothing to show viewmodel / commit all so far latest commit 842d846907 manueldeleon authored sep 22, 2014 .gitignore commit all so far sep 18, 2014 readme.md commit all so far sep 18, 2014 package.js commit all so far sep 22, 2014 versions.json commit all so far sep 18, 2014 viewmodel.coffee readme.md viewmodel: mvvm for meteor declarative > imperative reactive > event driven install: meteor add manuel:viewmodel the problem meteor is a leap forward in web development but one aspect that has remained behind is the way you deal with ui events. i'm referring to the interactions with the user and between ui elements. right now it's done in an event driven fashion. you listen for events, then run a piece of code that does something, you then update the ui in some way. develop any interactive ui and you end up with many, many levers and knobs that you have to synchronize to get the experience you want. the solution the solution is to use an mvvm like pattern: you keep the state of the ui in a javascript object and bind the ui elements to properties of that object. you declare what happens and when it happens, and then meteor will update the ui accordingly and best of all... reactively. go to viewmodel.meteor.com for examples and full documentation. status api training shop blog about © 2014 github , inc. terms privacy security contact something went wrong with that request. please try again. > > > ","createdAt":1412717705996,"_id":"z7ipAuA9mYERZace"}
{"url":"https://zapier.com/blog/how-to-hire-remote-team/","title":"From 3 to 16: How to Hire and Build a Remote Team - Zapier","text":" blog home from 3 to 16: how to hire and build a remote team wade foster / september 16, 2014 tweet > over the course of zapier's 34-month existence, we've grown from three founders cramped in a small apartment to a team of 16 around the world. while we're certainly not experts at hiring, we have picked up a few tricks (and things to avoid) to make building a remote team easier. this post covers: defining characteristics of a top-notch remote worker writing an attractive remote job post finding remote candidates hiring a remote employee the photos in this post are from our most recent zapier team retreat , which we hold every 6 months for in-person interaction. defining characteristics of a top-notch remote worker not everyone is cut out for remote work, so before you begin hiring people for a remote position you'll need to consider the skills it takes to be successful in this type of environment. great remote workers have a few traits that make them successful: propensity towards action: this is the type of person that devoid of a task list given to them, they'll find something meaningful to do. able to prioritize: often times, important tasks can be unclear when working remotely (especially at a startup). an individual who can focus on the right tasks and know to ignore others will do well. proficient written communicator: most communication in a remote team happens via text—email, team chat, or one-on-one private messages. if someone struggles to write clearly and concisely, they'll struggle in a remote team. equally as important is being able to show tact in written communication, too. it's all-to-easy to come off as curt via text. liberal use of emoticons can go a long way. trustworthy: if you can't trust the person, then not being able to see them every day is going to cause you to lose sleep. make sure you trust who you hire. local support system: if the only support system someone has is their work one, then being in a remote environment will likely make them go crazy. you need people who have outside support systems so they have people they can interact with on a daily/weekly basis. joel gascoigne and the team at buffer have found that people with these traits often come from freelance, contracting or startup backgrounds. we've certainly found that to be true, too. ten of the 13 hires at zapier have startup or freelance work in their background. writing an attractive remote job post before you start sourcing candidates, you want to make sure to do a good job at defining the position. often times, companies throw up a generic job opening for a marketer or developer, which doesn't really help the candidate decide if they want to work for your company or not. since remote companies don't have a local reputation, it's up to you to sell your company just as much as the role. when it comes to defining the position, the best way to do this is to first fill the position yourself, even if it's only for a week. the work you do will help you understand what's involved in this role at a much deeper level. this is a trick that basecamp (formerly 37signals) uses when hiring for a new role. jason fried , the company's co-founder, recently explained this practice in a reddit ama. when it comes to an all-new position at the company, we like to try to do it first with the people we have so we really understand the work. if you don't understand the work, it's really hard to evaluate someone's abilities. before we hired our first customer service person, i did just about all the customer service for two years. before we hired an office manager, david and i mostly split the duties. that really helped us know who would be good when we started talking to people about the job. by doing the role you are hiring for you'll also be able to write a more compelling job description and be better able to define how the role relates to the company and its success. as a result, your job posting will be a detailed listing that explains the ins-and-outs of what you do as a company. this might turn some people away, but those people wouldn't have been a good fit anyway. instead, you'll get applicants that are much more invested in being a part of your company. also, in the job posting, ask them to apply in a unique way—don't just ask for resumes. instead, try to make the application process prove their abilities for the job. for instance, when hiring for our business development position we had candidates complete a series of short exercises that tested the basics of the role's partner duties. and rather than asking for a cover letter upfront, we asked them to write a sample pitch email to a partner. love @zapier 's fizzbuzz-for-bizdev question https://t.co/6rsa7nks1m (\"tell us how you would get in touch with the ceo of infusionsoft.\") — patrick mckenzie (@patio11) june 26, 2014 > people excited about your company are willing to complete these extra tasks, often with enjoyment. those who aren't a good fit just skip your post or forget to do it so, turning the unique application process into a filter. finding remote candidates it's impossible to hire if you don't have candidates for the role, of course, so the first thing to consider is how people will find out about your open position. here's where we've had the best luck. our networks: people you've worked with in the past are great candidates to join up with you. this is especially true if you enjoyed working with them and want to work with them again. also, ask customers, partners, investors, family, friends and anyone you think might be helpful if they know of any good candidates. often times, people aren't actively looking for jobs, but they will confide in a friend that they are unhappy in their current role. local meetup groups: it's a bit odd to recommend local recruiting for a remote team, but this has worked out well for us. we're well connected with missouri dev meetup groups since the founding team has strong ties to the region. many of the people in the area are excited about zapier and stay in touch with what we do. your own userbase: if you're fortunate enough to have a large userbase that matches the credentials you need, then it can be a great place to recruit from. we do this by following a trick of buffer's and placing a subtle \"is hiring!\" link under our logo so it's impossible for site visitors to miss. this drives dozens of daily applications when we have open positions. additionally, your users are likely a strong culture fit since they are already more familiar with your company and how you operate. your blog: we don't publish positions on our blog but still see our increased content effort pay off in the hiring process. to our surprise, almost every candidate mentions the blog as a reason they want to work at zapier. blog posts about your company: similar to no. 4, much of our blog writing is about how we work (like this post). the people who connect with how we work get excited enough to search for how they can work alongside us. ask teammates to help with sourcing: some companies take a really aggressive stance and mine every employees social networks for potential job candidates. i haven't found this to be necessary. instead, simply ask teammates to help spread the word and with the goal of getting an awesome new teammate. often times, people are excited about working with and helping pick out their new teammate so including them in the process is a net benefit to all. job boards: as a last resort, job boards can be a source of candidates. often these have bottom of the barrel candidates who are constantly job hunting and mostly looking for any job, not your job. but you can occasionally strike gold. share, share, share: use twitter, linkedin, facebook, angellist and any channel you have access to to let people know that you're hiring. the more spread you can get, the more likely your job post will stumble across the right person's desk. sourcing candidates is often a harder task for remote teams than you'd think. since you don't have global connections, you're a small brand, and local ties can be hard to come by, too, it can be hard to get the word out about your company and your positions. take advantage of every channel you can find to get the word out and keep track of where the good candidates come from. then make sure to utilize those in the future. here are the ways our 13 employees found the zapier job opening they filled: micah - personal network james - personal network brian - personal network danny - social media jess - \"is hiring!\" link bryan - personal network chris - personal outreach alison - product hunt justin - independent research and friend suggestion brandon - hacker news rob - \"is hiring!\" link matt - personal outreach kirk - personal network and social media p.s. these are all really cool people. you should say hello to them on twitter (just click their name above). :-) hiring a remote employee if you've done everything up to this point, then you should start to see applicants roll in. this is where the real challenge starts—it's time to make the hire. first, you'll need to sort through dozens, hundreds, and maybe thousands of applicants to find the person you want. 1. sort through applicants in a project management tool we've borrowed heavily from how dosomething runs hiring with trello . i suggest managing the hiring pipeline in a project management tool—launchpad la, for example, uses asana —so that all in your company can see the candidates, comment on their application and feel involved in the process. as a remote team, you don't get those in-person, team conversations about candidates, so finding one spot to have those chats puts everyone on the same page. we set up a trello board with columns for \"no\", \"applied\", \"reached out\" and \"interviewed (needs decision)\". candidates email their application to an email address ( jobs@zapier.com ) and then a zapier integration automatically creates a trello card for candidates in the \"applied\" column. the card contains a link to the applicant's initial email, which i later use to quickly reply to those individuals (when the email initially arrives in my inbox, it's auto-archived). next, we nominate someone to run point for hiring for that position. they are in charge of all the initial screening and making sure the ball never gets dropped in the hiring process. this role is important . without someone filling this role, it's highly likely that candidates will get slow response times and the ball will be dropped. i know we had this happen before having someone assume this role. that said, just because someone is running point for the position doesn't mean you don't want other teammates involved in the hiring process. in fact, the exact opposite, you want to get other teammates involved to independently evaluate candidates to help reduce bias. to do this make the trello job board available to everyone internally. use zapier automation like the following to notify teammates when new applicants come in. invite them to leave comments on the card—this is to replace those in-person chats. > next, the point person selects a handful of people for an interview call and lets the other candidates know that they are no longer in the running for the position. 2. reject unqualified applicants quickly and kindly it's always best to let them know as soon as possible so they can continue with their search. it's also a polite thing to do. here's a rough template we use: hi john, thanks for your email! loved hearing about [insert something interesting they mentioned from the app]. that said, we're moving forward with other candidates at this point. best of luck and hopefully you'll stay in touch. we post new positions periodically and would love to see your name again. wade the email is personal, lets the individual know they are no longer in the running for the position, but also invites them to stay in touch for the future. after all, these are candidates that are excited about your company and may be a better fit for a different role down the road. best to part ways as friendly as possible. 3. invite top candidates to a video call interview you'll want to schedule a follow up call with the top candidates. these are best done synchronously so make the most of your time and schedule these back-to-back. doing so helps you more easily compare candidates, as well. pay special attention to how well the applicant communicates during this part of the process. do they suggest dates and times with time zones? do they send over calendar invites? do those have time zones attached? do they offer multiple ways to connect, such as phone, skype and google hangout? effective communication is so key in a remote position that these little things are a sign of a person who might be a great fit. more potential warning signs are individuals who are poor at following up via email, forget when the interview was scheduled, or aren't flexible with an interview time. matthew guay , who recently joined us, is a u.s. expat based in bangkok, which means his work hours are completely opposite of ours. but during the interview process, he was more than happy to stay up late in order to meet our whole team on a conference call. his quickness to schedule and flexibility played a role in his hiring. 4. put top candidates to the test with a project after these video call interviews, a few candidates have likely emerged as the strongest applicants. at this point we like to put them to the test. depending on the role, we'll devise a task that is of moderate difficulty and indicative of the types of activities they'll do on a day-to-day basis. for engineers, that might be using the zapier developer platform to add a new service. for marketing, that may be writing a blog post in collaboration with someone on the team. more often than not, the task requires interaction with folks on the team. that way you'll get a sense of how they communicate and collaborate. the test should only take a few hours. we want to be cognizant of everyones time. if it is more than a few hours we always pay the candidate for their time. 5. arrange finalists to meet the whole team if that goes well, we have the candidate meet the team. this happens via a gotomeeting (previously google hangouts, but it has a 15-person limit). we ask the candidate to prepare a short lightning talk on a topic of their choice. it can be anything. the hangout starts with a brief round of intros and then the applicant gives the presentation followed by q&a. this part of the process has been key. it allows everyone on the team to interact with the person at least once. it also allows the applicant to meet everyone and get an inside look at how we operate. this goes a long way for helping us evaluate the applicant and the applicant evaluate us. the best applicants will likely have their pick of places to work, so we want to put our best foot forward, too. after the gotomeeting, i send a quick email to everyone on the team asking them what they thought. we rarely use email for all team collaboration and instead opt for slack , trello or our internal blog which are all accessible internally. in this case, email is best since it's private and allows us to be more candid about our feelings toward the applicant. if all goes well up to this point we usually make a job offer. more remote hiring resources one thing you'll note is that we never meet the individual in-person. for our first five hires, we met candidates in-person. we found this was helpful but ultimately wasn't critical. what it did add was cost, coordination headache and time. if you wanted to interview three people face-to-face that could take up to two weeks to manage. the first person in the interview process would then be waiting two or three weeks before knowing if they got the job or not. so now we do everything via google hangouts, email and gotomeeting. this works swimmingly. if you're interested in how others hire in remote teams here are how companies i admire do this: leo widrich on how buffer hires gregory ciotti of help scout on how to make hiring less of a headache tommy morgan on how treehouse hires developers alex turnbull on how groove hires top talent or if you're interested in working with us, we're hiring, too ! what about you? i'd love to hear how you hire for remote teams or what you thought of being hired into a remote team. you might also enjoy: \" 21 months in: how to manage a remote team \" tweet > get productivity tips in your inbox learn about workflow, company building, and how to get things done. subscribe about the author wade foster is a co-founder and ceo at zapier. he likes to write about process, productivity, startups and how to do awesome work. follow @wadefoster > please enable javascript to view the comments powered by disqus. comments powered by disqus > > > > get started how it works pricing sign up for zapier explore zapbook home app directory search for zaps case studies use cases customers helpful help & support learning center app + feature updates contact support developers developer platform documentation api status board engineering blog bug bounty company blog about brand + logos jobs makes you happier :) © 2014 zapier inc. | terms of service | privacy > > > > > > > > > ","createdAt":1412717706067,"_id":"4xXSDY0ZEBu0oSEC"}
{"url":"http://longform.org/stories/playboy-interview-steve-jobs","title":"Longform Reprints: Playboy Interview: Steve Jobs by David Sheff","text":" home playboy interview: steve jobs by david sheff • playboy • february 1985 this interview is part of the playboy interview: moguls , a new ebook anthology that also includes conversations with jeff bezos, sergey brin and larry page, david geffen, and more. buy it today at amazon . playboy: we survived 1984, and computers did not take over the world, though some people might find that hard to believe. if there’s any one individual who can be either blamed or praised for the proliferation of computers, you, the 29-year-old father of the computer revolution, are the prime contender. it has also made you wealthy beyond dreams—your stock was worth almost a half billion dollars at one point, wasn’t it? jobs: i actually lost $250,000,000 in one year when the stock went down. [laughs] playboy: you can laugh about it? jobs: i’m not going to let it ruin my life. isn’t it kind of funny? you know, my main reaction to this money thing is that it’s humorous, all the attention to it, because it’s hardly the most insightful or valuable thing that’s happened to me in the past ten years. but it makes me feel old, sometimes, when i speak at a campus and i find that what students are most in awe of is the fact that i’m a millionaire. when i went to school, it was right after the sixties and before this general wave of practical purposefulness had set in. now students aren’t even thinking in idealistic terms, or at least nowhere near as much. they certainly are not letting any of the philosophical issues of the day take up too much of their time as they study their business majors. the idealistic wind of the sixties was still at our backs, though, and most of the people i know who are my age have that engrained in them forever. playboy: it’s interesting that the computer field has made millionaires of— jobs: young maniacs, i know. playboy: we were going to say guys like you and steve wozniak, working out of a garage only ten years ago. just what is this revolution you two seem to have started? jobs: we’re living in the wake of the petrochemical revolution of 100 years ago. the petrochemical revolution gave us free energy—free mechanical energy, in this case. it changed the texture of society in most ways. this revolution, the information revolution, is a revolution of free energy as well, but of another kind: free intellectual energy. it’s very crude today, yet our macintosh computer takes less power than a 100-watt light bulb to run and it can save you hours a day. what will it be able to do ten or 20 years from now, or 50 years from now? this revolution will dwarf the petrochemical revolution. we’re on the forefront. playboy: maybe we should pause and get your definition of what a computer is. how do they work? jobs: computers are actually pretty simple. we’re sitting here on a bench in this café [for this part of the interview ]. let’s assume that you understood only the most rudimentary of directions and you asked how to find the rest room. i would have to describe it to you in very specific and precise instructions. i might say, “scoot sideways two meters off the bench. stand erect. lift left foot. bend left knee until it is horizontal. extend left foot and shift weight 300 centimeters forward…” and on and on. if you could interpret all those instructions 100 times faster than any other person in this café, you would appear to be a magician: you could run over and grab a milk shake and bring it back and set it on the table and snap your fingers, and i’d think you made the milk shake appear, because it was so fast relative to my perception. that’s exactly what a computer does. it takes these very, very simple-minded instructions—“go fetch a number, add it to this number, put the result there, perceive if it’s greater than this other number”—but executes them at a rate of, let’s say, 1,000,000 per second. at 1,000,000 per second, the results appear to be magic. that’s a simple explanation, and the point is that people really don’t have to understand how computers work. most people have no concept of how an automatic transmission works, yet they know how to drive a car. you don’t have to study physics to understand the laws of motion to drive a car. you don’t have to understand any of this stuff to use macintosh—but you asked. [laughs] playboy: obviously, you believe that computers are going to change our personal lives, but how would you persuade a skeptic? a holdout? jobs: a computer is the most incredible tool we’ve ever seen. it can be a writing tool, a communications center, a supercalculator, a planner, a filer and an artistic instrument all in one, just by being given new instructions, or software, to work from. there are no other tools that have the power and versatility of a computer. we have no idea how far it’s going to go. right now, computers make our lives easier. they do work for us in fractions of a second that would take us hours. they increase the quality of life, some of that by simply automating drudgery and some of that by broadening our possibilities. as things progress, they’ll be doing more and more for us. playboy: how about some concrete reasons to buy a computer today? an executive in your industry recently said, “we’ve given people computers, but we haven’t shown them what to do with them. i can balance my checkbook faster by hand than on my computer.” why should a person buy a computer? jobs: there are different answers for different people. in business, that question is easy to answer: you really can prepare documents much faster and at a higher quality level, and you can do many things to increase office productivity. a computer frees people from much of the menial work. besides that, you are giving them a tool that encourages them to be creative. remember, computers are tools. tools help us do our work better. in education, computers are the first thing to come along since books that will sit there and interact with you endlessly, without judgment. socratic education isn’t available anymore, and computers have the potential to be a real breakthrough in the educational process when used in conjunction with enlightened teachers. we’re in most schools already. playboy: those are arguments for computers in business and in schools, but what about the home? jobs: so far, that’s more of a conceptual market than a real market. the primary reasons to buy a computer for your home now are that you want to do some business work at home or you want to run educational software for yourself or your children. if you can’t justify buying a computer for one of those two reasons, the only other possible reason is that you just want to be computer literate. you know there’s something going on, you don’t exactly know what it is, so you want to learn. this will change: computers will be essential in most homes. playboy: what will change? jobs: the most compelling reason for most people to buy a computer for the home will be to link it into a nationwide communications network. we’re just in the beginning stages of what will be a truly remarkable breakthrough for most people—as remarkable as the telephone. playboy: specifically, what kind of breakthrough are you talking about? jobs: i can only begin to speculate. we see that a lot in our industry: you don’t know exactly what’s going to result, but you know it’s something very big and very good. playboy: then for now, aren’t you asking home-computer buyers to invest $3000 in what is essentially an act of faith? jobs: in the future, it won’t be an act of faith. the hard part of what we’re up against now is that people ask you about specifics and you can’t tell them. a hundred years ago, if somebody had asked alexander graham bell, “what are you going to be able to do with a telephone?” he wouldn’t have been able to tell him the ways the telephone would affect the world. he didn’t know that people would use the telephone to call up and find out what movies were playing that night or to order some groceries or call a relative on the other side of the globe. but remember that first the public telegraph was inaugurated, in 1844. it was an amazing breakthrough in communications. you could actually send messages from new york to san francisco in an afternoon. people talked about putting a telegraph on every desk in america to improve productivity. but it wouldn’t have worked. it required that people learn this whole sequence of strange incantations, morse code, dots and dashes, to use the telegraph. it took about 40 hours to learn. the majority of people would never learn how to use it. so, fortunately, in the 1870s, bell filed the patents for the telephone. it performed basically the same function as the telegraph, but people already knew how to use it. also, the neatest thing about it was that besides allowing you to communicate with just words, it allowed you to sing. playboy: meaning what? jobs: it allowed you to intone your words with meaning beyond the simple linguistics. and we’re in the same situation today. some people are saying that we ought to put an ibm pc on every desk in america to improve productivity. it won’t work. the special incantations you have to learn this time are “slash q-zs” and things like that. the manual for wordstar, the most popular word-processing program, is 400 pages thick. to write a novel, you have to read a novel—one that reads like a mystery to most people. they’re not going to learn slash q-z any more than they’re going to learn morse code. that is what macintosh is all about. it’s the first “telephone” of our industry. and, besides that, the neatest thing about it, to me, is that the macintosh lets you sing the way the telephone did. you don’t simply communicate words, you have special print styles and the ability to draw and add pictures to express yourself. playboy: is that really significant or is it simply a novelty? the macintosh has been called “the world’s most expensive etch a sketch” by at least one critic. jobs: it’s as significant as the difference between the telephone and the telegraph. imagine what you could have done if you had this sophisticated an etch a sketch when you were growing up. but that’s only a small part of it. not only can it help you increase your productivity and your creativity enormously, but it also allows us to communicate more efficiently by using pictures and graphs as well as words and numbers. playboy: most computers use key strokes to enter instructions, but macintosh replaces many of them with something called a mouse—a little box that is rolled around on your desk and guides a pointer on your computer screen. it’s a big change for people used to keyboards. why the mouse? jobs: if i want to tell you there is a spot on your shirt, i’m not going to do it linguistically: “there’s a spot on your shirt 14 centimeters down from the collar and three centimeters to the left of your button.” if you have a spot—“there!” [ he points ]—i’ll point to it. pointing is a metaphor we all know. we’ve done a lot of studies and tests on that, and it’s much faster to do all kinds of functions, such as cutting and pasting, with a mouse, so it’s not only easier to use but more efficient. playboy: how long did it take to develop macintosh? jobs: it was more than two years on the computer itself. we had been working on the technology behind it for years before that. i don’t think i’ve ever worked so hard on something, but working on macintosh was the neatest experience of my life. almost everyone who worked on it will say that. none of us wanted to release it at the end. it was as though we knew that once it was out of our hands, it wouldn’t be ours anymore. when we finally presented it at the shareholders’ meeting, everyone in the auditorium stood up and gave it a five-minute ovation. what was incredible to me was that i could see the mac team in the first few rows. it was as though none of us could believe that we’d actually finished it. everyone started crying. playboy: we were warned about you: before this interview began, someone said we were “about to be snowed by the best.” jobs: [ smiling ] we’re just enthusiastic about what we do. playboy: but considering that enthusiasm, the multimillion-dollar ad campaigns and your own ability to get press coverage, how does the consumer know what’s behind the hype? jobs: ad campaigns are necessary for competition; ibm’s ads are everywhere. but good pr educates people; that’s all it is. you can’t con people in this business. the products speak for themselves. playboy: aside from some of the recurrent criticisms—that the mouse is inefficient, that the macintosh screen is only black and white—the most serious charge is that apple overprices its products. do you care to answer any or all? jobs: we’ve done studies that prove that the mouse is faster than traditional ways of moving through data or applications. someday we may be able to build a color screen for a reasonable price. as to overpricing, the start-up of a new product makes it more expensive than it will be later. the more we can produce, the lower the price will get— playboy: that’s what critics charge you with: hooking the enthusiasts with premium prices, then turning around and lowering your prices to catch the rest of the market. jobs: that’s simply untrue. as soon as we can lower prices, we do. it’s true that our computers are less expensive today than they were a few years ago, or even last year. but that’s also true of the ibm pc. our goal is to get computers out to tens of millions of people, and the cheaper we can make them, the easier it’s going to be to do that. i’d love it if macintosh cost $1000. playboy: how about people who bought lisa and apple iii, the two computers you released prior to macintosh? you’ve left them with incompatible, out-of-date products. jobs: if you want to try that one, add the people who bought the ibm pcs or the pc jrs to that list, too. as far as lisa is concerned, since some of its technology was used in the macintosh, it can now run macintosh software and is being seen as a big brother to macintosh; though it was unsuccessful at first, our sales of lisa are going through the roof. we’re also still selling more than 2000 apple iiis a month—more than half to repeat buyers. the over-all point is that new technology will not necessarily replace old technology, but it will date it. by definition. eventually, it will replace it. but it’s like people who had black-and-white tvs when color came out. they eventually decided whether or not the new technology was worth the investment. playboy: at the rate things are changing, won’t mac itself be out of date within a few years? jobs: before macintosh, there were two standards: apple ii and ibm pc. those two standards are like rivers carved in the rock bed of a canyon. it’s taken years to carve them—seven years to carve the apple ii and four years to carve the ibm. what we have done with macintosh is that in less than a year, through the momentum of the revolutionary aspects of the product and through every ounce of marketing that we have as a company, we have been able to blast a third channel through that rock and make a third river, a third standard. in my opinion, there are only two companies that can do that today, apple and ibm. maybe that’s too bad, but to do it right now is just a monumental effort, and i don’t think that apple or ibm will do that in the next three or four years. toward the end of the eighties, we may be seeing some new things. playboy: and in the meantime? jobs: the developments will be in making the products more and more portable, networking them, getting out laser printers, getting out shared data bases, getting out more communications ability, maybe the merging of the telephone and the personal computer. playboy: you have a lot riding on this one. some people have said that macintosh will make or break apple. after lisa and apple iii, apple stock plummeted and the industry speculated that apple might not survive. jobs: yeah, we felt the weight of the world on our shoulders. we knew that we had to pull the rabbit out of the hat with macintosh, or else we’d never realize the dreams we had for either the products or the company. playboy: how serious was it? was apple near bankruptcy? jobs: no, no, no. in fact, 1983, when all these predictions were being made, was a phenomenally successful year for apple. we virtually doubled in size in 1983. we went from $583,000,000 in 1982 to something like $980,000,000 in sales. it was almost all apple ii—related. it just didn’t live up to our expectations. if macintosh weren’t a success, we probably would have stayed at something like a billion dollars a year, selling apple iis and versions of it. playboy: then what was behind the talk last year that apple had had it? jobs: ibm was coming on very, very strong, and the momentum was switching to ibm. the software developers were moving to ibm. the dealers were talking more and more of ibm. it became clear to all of us who worked on macintosh that it was just gonna blow the socks off the industry, that it was going to redefine the industry. and that’s exactly what it had to do. if macintosh hadn’t been successful, then i should have just thrown in the towel, because my vision of the whole industry would have been totally wrong. playboy: apple iii was supposed to have been your souped-up apple ii, but it has been a failure since it was launched, four years ago. you recalled the first 14,000, and even the revised apple iii never took off. how much was lost on apple iii? jobs: infinite, incalculable amounts. i think if the iii had been more successful, ibm would have had a much harder time entering the market place. but that’s life. i think we emerged from that experience much stronger. playboy: yet when lisa came out, it, too, was a relative failure in the market place. what went wrong? jobs: first of all, it was too expensive—about ten grand. we had gotten fortune 500-itis, trying to sell to those huge corporations, when our roots were selling to people. there were other problems: late shipping; the software didn’t come together in the end as well as we hoped and we lost a lot of momentum. and ibm’s coming on very strong, coupled with our being about six months late, coupled with the price’s being too high, plus another strategic mistake we made—deciding to sell lisa only through about 150 dealers, which was absolutely foolish on our part—meant it was a very costly mistake. we decided to hire people we thought were marketing and management experts. not a bad idea, but unfortunately, this was such a new business that the things the so-called professionals knew were almost detriments to their success in this new way of looking at business. playboy: was that a reflection of insecurity on your part—“this thing has gotten big and now we’re playing hardball; i better bring in some real pros”? jobs: remember, we were 23, 24 and 25 years old. we had never done any of this before, so it seemed like a good thing to do. playboy: were most of those decisions, good and bad, yours? jobs: we tried never to have one person make all the decisions. there were three people running the company at that time: mike scott, mike markkula and myself. now it’s john sculley [apple’s president] and myself. in the early days, if there was a disagreement, i would generally defer my judgment to some of the other people who had more experience than i had. in many cases, they were right. in some important cases, if we had gone my way, we would have done better. playboy: you wanted to run the lisa division. markkula and scott, who were, in effect, your bosses, even though you had a hand in hiring them, didn’t feel you were capable, right? jobs: after setting up the framework for the concepts and finding the key people and sort of setting the technical directions, scotty decided i didn’t have the experience to run the thing. it hurt a lot. there’s no getting around it. playboy: did you feel you were losing apple? jobs: there was a bit of that, i guess, but the thing that was harder for me was that they hired a lot of people in the lisa group who didn’t share the vision we originally had. there was a big conflict in the lisa group between the people who wanted, in essence, to build something like macintosh and the people hired from hewlett-packard and other companies who brought with them a perspective of larger machines, corporate sales. i just decided that i was going to go off and do that myself with a small group, sort of go back to the garage, to design the macintosh. they didn’t take us very seriously. i think scotty was just sort of humoring me. playboy: but this was the company that you founded. weren’t you resentful? jobs: you can never resent your kid. playboy: even when your kid tells you to fuck off? jobs: i wouldn’t feel resentment. i’d feel great sorrow about it and i’d be frustrated, which i was. but i got the best people who were at apple, because i thought that if we didn’t do that, we’d be in real trouble. of course, it was those people who came up with macintosh. [ shrugs ] look at mac. playboy: that verdict is far from in. in fact, you ushered in the mac with a lot of the same fanfare that preceded the lisa, and the lisa failed initially. jobs: it’s true: we expressed very high hopes for lisa and we were wrong. the hardest thing for us was that we knew macintosh was coming, and macintosh seemed to overcome every possible objection to lisa. as a company, we would be getting back to our roots—selling computers to people, not corporations. we went off and built the most insanely great computer in the world. playboy: does it take insane people to make insanely great things? jobs: actually, making an insanely great product has a lot to do with the process of making the product, how you learn things and adopt new ideas and throw out old ideas. but, yeah, the people who made mac are sort of on the edge. playboy: what’s the difference between the people who have insanely great ideas and the people who pull off those insanely great ideas? jobs: let me compare it with ibm. how come the mac group produced mac and the people at ibm produced the pc jr ? we think the mac will sell zillions, but we didn’t build mac for anybody else. we built it for ourselves. we were the group of people who were going to judge whether it was great or not. we weren’t going to go out and do market research. we just wanted to build the best thing we could build. when you’re a carpenter making a beautiful chest of drawers, you’re not going to use a piece of plywood on the back, even though it faces the wall and nobody will ever see it. you’ll know it’s there, so you’re going to use a beautiful piece of wood on the back. for you to sleep well at night, the aesthetic, the quality, has to be carried all the way through. playboy: are you saying that the people who made the pc jr don’t have that kind of pride in the product? jobs: if they did, they wouldn’t have turned out the pc jr . it seems clear to me that they were designing that on the basis of market research for a specific market segment, for a specific demographic type of customer, and they hoped that if they built this, lots of people would buy them and they’d make lots of money. those are different motivations. the people in the mac group wanted to build the greatest computer that has ever been seen. playboy: why is the computer field dominated people so young? the average age of apple employees is 29. jobs: it’s often the same with any new, revolutionary thing. people get stuck as they get older. our minds are sort of electrochemical computers. your thoughts construct patterns like scaffolding in your mind. you are really etching chemical patterns. in most cases, people get stuck in those patterns, just like grooves in a record, and they never get out of them. it’s a rare person who etches grooves that are other than a specific way of looking at things, a specific way of questioning things. it’s rare that you see an artist in his 30s or 40s able to really contribute something amazing. of course, there are some people who are innately curious, forever little kids in their awe of life, but they’re rare. playboy: a lot of guys in their 40s are going to be real pleased with you. let’s move on to the other thing that people talk about when they mention apple—the company, not the computer. you feel a similar sense of mission about the way things are run at apple, don’t you? jobs: i do feel there is another way we have an effect on society besides our computers. i think apple has a chance to be the model of a fortune 500 company in the late eighties and early nineties. ten to 15 years ago, if you asked people to make a list of the five most exciting companies in america, polaroid and xerox would have been on everyone’s list. where are they now? they would be on no one’s list today. what happened? companies, as they grow to become multibillion-dollar entities, somehow lose their vision. they insert lots of layers of middle management between the people running the company and the people doing the work. they no longer have an inherent feel or a passion about the products. the creative people, who are the ones who care passionately, have to persuade five layers of management to do what they know is the right thing to do. what happens in most companies is that you don’t keep great people under working environments where individual accomplishment is discouraged rather than encouraged. the great people leave and you end up with mediocrity. i know, because that’s how apple was built. apple is an ellis island company. apple is built on refugees from other companies. these are the extremely bright individual contributors who were troublemakers at other companies. you know, dr. edwin land was a troublemaker. he dropped out of harvard and founded polaroid. not only was he one of the great inventors of our time but, more important, he saw the intersection of art and science and business and built an organization to reflect that. polaroid did that for some years, but eventually dr. land, one of those brilliant troublemakers, was asked to leave his own company—which is one of the dumbest things i’ve ever heard of. so land, at 75, went off to spend the remainder of his life doing pure science, trying to crack the code of color vision. the man is a national treasure. i don’t understand why people like that can’t be held up as models: this is the most incredible thing to be—not an astronaut, not a football player—but this . anyway, one of our biggest challenges, and the one i think john sculley and i should be judged on in five to ten years, is making apple an incredibly great ten- or 20-billion-dollar company. will it still have the spirit it does today? we’re charting new territory. there are no models that we can look to for our high growth, for some of the new management concepts we have. so we’re having to find our own way. playboy: if apple is really that kind of company, then why the projected twenty-fold growth? why not stay relatively small? jobs: the way it’s going to work out is that in our business, in order to continue to be one of the major contributors, we’re going to have to be a ten-billion-dollar company. that growth is required for us to keep up with the competition. our concern is how we become that, rather than the dollar goal, which is meaningless to us. at apple, people are putting in 18-hour days. we attract a different type of person—a person who doesn’t want to wait five or ten years to have someone take a giant risk on him or her. someone who really wants to get in a little over his head and make a little dent in the universe. we are aware that we are doing something significant. we’re here at the beginning of it and we’re able to shape how it goes. everyone here has the sense that right now is one of those moments when we are influencing the future. most of the time, we’re taking things. neither you nor i made the clothes we wear; we don’t make the food or grow the foods we eat; we use a language that was developed by other people; we use another society’s mathematics. very rarely do we get a chance to put something back into that pool. i think we have that opportunity now. and no, we don’t know where it will lead. we just know there’s something much bigger than any of us here. playboy: you’ve said that the business market is crucial for you to conquer with macintosh. can you beat ibm at work? jobs: yes. the business market has several sectors. rather than just thinking of the fortune 500, which is where ibm is strongest, i like to think of the fortune 5,000,000 or 14,000,000. there are 14,000,000 small businesses in this country. i think that the vast group of people who need to be computerized includes that large number of medium and small businesses. we’re going to try to be able to bring some meaningful solutions to them in 1985. playboy: how? jobs: our approach is to think of them not as businesses but as collections of people. we want to qualitatively change the way people work. we don’t just want to help them do word processing faster or add numbers faster. we want to change the way they can communicate with one another. we’re seeing five-page memos get compressed to one-page memos because we can use a picture to express the key concept. we’re seeing less paper flying around and more quality of communication. and it’s more fun. there’s always been this myth that really neat, fun people at home all of a sudden have to become very dull and boring when they come to work. it’s simply not true. if we can inject that liberal-arts spirit into the very serious realm of business, i think it will be a worthwhile contribution. we can’t even conceive of how far it will go. playboy: but in the business market, you’re fighting the ibm name as much as anything. people associate ibm with stability and efficiency. the new entry in the computer field, at&t, has that one up on you, too. apple is a relatively young and untested company, particularly in the eyes of corporations that might be customers. jobs: it’s macintosh’s job to really penetrate the business market place. ibm focuses on the top down, the mainframe centric approach to selling in businesses. if we are going to be successful, we’ve got to approach this from a grass-roots point of view. to use networking as an example, rather than focusing on wiring up whole companies, as ibm is doing, we’re going to focus on the phenomenon of the small work group. playboy: one of the experts in the field says that for this industry to really flourish, and for it to benefit the consumer, one standard has to prevail. jobs: that’s simply untrue. insisting that we need one standard now is like saying that they needed one standard for automobiles in 1920. there would have been no innovations such as the automatic transmission, power steering and independent suspension if they believed that. the last thing we want to do is freeze technology. with computers, macintosh is revolutionary. there is no question that macintosh’s technology is superior to ibm’s. there is a clear need for an alternative to ibm. playboy: was any of your decision not to become compatible with ibm based on the fact that you didn’t want to knuckle under to ibm? one critic says that the reason mac isn’t ibm-compatible is mere arrogance—that “steve jobs was saying ‘fuck you’ to ibm.” jobs: it wasn’t that we had to express our manhood by being different, no. playboy: then why were you? jobs: the main thing is very simply that the technology we developed is superior. it could not be this good if we became compatible with ibm. of course, it’s true that we don’t want ibm to dominate this industry. a lot of people thought we were nuts for not being ibm-compatible, for not living under ibm’s umbrella. there were two key reasons we chose to bet our company on not doing that: the first was that we thought—and i think as history is unfolding, we’re being proved correct—that ibm would fold its umbrella on the companies making compatible computers and absolutely crush them. second and more important, we did not go ibm-compatible because of the product vision that drives this company. we think that computers are the most remarkable tools that humankind has ever come up with, and we think that people are basically tool users. so if we can just get lots of computers to lots of people, it will make some qualitative difference in the world. what we want to do at apple is make computers into appliances and get them to tens of millions of people. that’s simply what we want to do. and we couldn’t do that with the current ibm-generation type of technology. so we had to do something different. that’s why we came up with the macintosh. playboy: from 1981 to 1983, your share of the personal-computer sales slipped from 29 percent to 23 percent. ibm’s part has grown from three percent to 28 percent in the same time. how do you fight the numbers? jobs: we’ve never worried about numbers. in the market place, apple is trying to focus the spotlight on products, because products really make a difference. ibm is trying to focus the spotlight on service, support, security, mainframes and motherhood. now, apple’s key observation three years ago was that when you’re shipping 10,000,000 computers a year, even ibm does not have enough mothers to ship one with every computer. so you’ve got to build motherhood into the computer. and that’s a big part of what macintosh is all about. all these things show that it really is coming down to just apple and ibm. if for some reason, we make some giant mistakes and ibm wins, my personal feeling is that we are going to enter sort of a computer dark ages for about 20 years. once ibm gains control of a market sector, they almost always stop innovation. they prevent innovation from happening. playboy: why? jobs: look at this example: frito-lay is a very interesting company. they call on more than half a million accounts a week. there’s a frito-lay rack in each store, and the chips are all there, and every store’s got the identical rack and the big ones have multiples. for frito-lay, the biggest problem is stale product—bad chips, so to speak. for frito-lay’s service, they’ve got, like, 10,000 guys who run around and take out the stale product and replace it with good product. they talk to the manager of that department and they make sure everything’s fine. because of that service and support, they now have more than an 80 percent share of every segment of chips that they’re in. nobody else can break into that. as long as they keep doing what they do well, nobody else can get 80 percent of the market share, because they can’t get the sales and support staff. they can’t get it because they can’t afford it. they can’t afford it because they don’t have 80 percent of the market share. it’s catch-22. nobody will ever be able to break into their franchise. frito-lay doesn’t have to innovate very much. they just watch all the little chip companies come out with something new, study it for a year, and a year or two years later they come out with their own, service and support it to death, and they’ve got 80 percent of the market share of the new product a year later. ibm is playing exactly the same game. if you look at the mainframe market place, there’s been virtually zero innovation since ibm got dominant control of that market place 15 years ago. they are going to do the same thing in every other sector of the computer market place if they can get away with it. the ibm pc fundamentally brought no new technology to the industry at all. it was just repackaging and slight extension of apple ii technology, and they want it all. they absolutely want it all. this market place is coming down to the two of us, whether we like it or not. i don’t particularly like it, but it’s coming down to apple and ibm. playboy: how can you say that about an industry that’s changing so fast? macintosh is the hot new thing right now, but will it still be in two years? aren’t you competing with your own philosophy? just as you’re after ibm, aren’t there small computer companies coming after apple? jobs: in terms of supplying the computer itself, it’s coming down to apple and ibm. and i don’t think there are going to be a lot of third- and fourth-place companies, much less sixth- or seventh-place companies. most of the new, innovative companies are focusing on the software. i think there will be lots of innovation in the areas of software but not in hardware. playboy: ibm might say the same thing about hardware, but you’re not about to let it get away with that. why is your point any different? jobs: i think that the scale of the business has gotten large enough so that it’s going to be very difficult for anyone to successfully launch anything new. playboy: no more billion-dollar companies hatched in garages? jobs: no, i’m afraid not in computers. and this puts a responsibility on apple, because if there’s going to be innovation in this industry, it’ll come from us. it’s the only way we can compete with them. if we go fast enough, they can’t keep up. playboy: when do you think ibm will finally, as you put it, fold the umbrella on the companies making ibm-compatible computers? jobs: there may be some imitators left in the $100,000,000-to-$200,000,000 range, but being a $200,000,000 company is going to mean you are struggling for your life, and that’s not really a position from which to innovate. not only do i think ibm will do away with its imitators by providing software they can’t provide, i think eventually it will come up with a new standard that won’t even be compatible with what it’s making now—because it is too limiting. playboy: which is exactly what you’ve done at apple. if a person owns software for the apple ii, he can’t run it on the macintosh. jobs: that’s right. mac is altogether new. we knew that we could reach the early innovators with current-generation technology—apple ii, ibm pc—because they’d stay up all night learning how to use their computer. but we’d never reach the majority of people. if we were really going to get computers to tens of millions of people, we needed a technology that would make the thing radically easier to use and more powerful at the same time, so we had to make a break. we just had to do it. we wanted to make sure it was great, because it may be the last chance that any of us get to make a clean break. and i’m very happy with the way macintosh turned out. it will prove a really solid foundation for the next ten years. playboy: let’s go back to the predecessors of the lisa and the mac, to the beginning. how influential were your parents in your interest in computers? jobs: they encouraged my interests. my father was a machinist, and he was a sort of genius with his hands. he can fix anything and make it work and take any mechanical thing apart and get it back together. that was my first glimpse of it. i started to gravitate more toward electronics, and he used to get me things i could take apart and put back together. he was transferred to palo alto when i was five. that’s how we ended up in the valley. playboy: you had been adopted, hadn’t you? how much of a factor in your life was that? jobs: you don’t ever really know, do you? playboy: did you try to find your biological parents? jobs: i think it’s quite a natural curiosity for adopted people to want to understand where certain traits come from. but i’m mostly an environmentalist. i think the way you are raised and your values and most of your world view come from the experiences you had as you grew up. but some things aren’t accounted for that way. i think it’s quite natural to have a curiosity about it. and i did. playboy: were you successful in trying to find your natural parents? jobs: that’s one area i really don’t want to talk about. playboy: the valley your parents moved to has since come to be known as silicon valley. what was it like growing up there? jobs: it was the suburbs. it was like most suburbs in the u.s.: i grew up on a block with lots of kids. my mother taught me to read before i went to school, so i was pretty bored in school, and i turned into a little terror. you should have seen us in third grade. we basically destroyed our teacher. we would let snakes loose in the classroom and explode bombs. things changed in the fourth grade, though. one of the saints in my life is this woman named imogene hill, who was a fourth-grade teacher who taught this advanced class. she got hip to my whole situation in about a month and kindled a passion in me for learning things. i learned more that year than i think i learned in any year in school. they wanted to put me in high school after that year, but my parents very wisely wouldn’t let them. playboy: but location had something to do with your interests, didn’t it? how did silicon valley come to be? jobs: the valley is positioned strategically between two great universities, berkeley and stanford. both of those universities attract not only lots of students but very good students and ones from all over the united states. they come here and fall in love with the area and they stay here. so there is a constant influx of new, bright human resources. before world war two, two stanford graduates named bill hewlett and dave packard created a very innovative electronics company—hewlett-packard. then the transistor was invented in 1948 by bell telephone laboratories. one of the three coinventors of the transistor, william shockley, decided to return to his home town of palo alto to start a little company called shockley labs or something. he brought with him about a dozen of the best and brightest physicists and chemists of his day. little by little, people started breaking off and forming competitive companies, like those flowers or weeds that scatter seeds in hundreds of directions when you blow on them. and that’s why the valley is here today. playboy: what was your introduction to computers? jobs: a neighbor down the block named larry lang was an engineer at hewlett-packard. he spent a lot of time with me, teaching me stuff. the first computer i ever saw was at hewlett-packard. they used to invite maybe ten of us down every tuesday night and give us lectures and let us work with a computer. i was maybe 12 the first time. i remember the night. they showed us one of their new desktop computers and let us play on it. i wanted one badly. playboy: what was it about it that interested you? did you have a sense of its potential? jobs: it wasn’t anything like that. i just thought they were neat. i just wanted to mess around with one. playboy: you went to work for hewlett-packard. how did that happen? jobs: when i was 12 or 13, i wanted to build something and i needed some parts, so i picked up the phone and called bill hewlett—he was listed in the palo alto phone book. he answered the phone and he was real nice. he chatted with me for, like, 20 minutes. he didn’t know me at all, but he ended up giving me some parts and he got me a job that summer working at hewlett-packard on the line, assembling frequency counters. assembling may be too strong. i was putting in screws. it didn’t matter; i was in heaven. i remember my first day, expressing my complete enthusiasm and bliss at being at hewlett-packard for the summer to my supervisor, a guy named chris, telling him that my favorite thing in the whole world was electronics. i asked him what his favorite thing to do was and he looked at me and said, “to fuck!” [laughs] learned a lot that summer. playboy: at what point did you meet steve wozniak? jobs: i met woz when i was 13, at a friend’s garage. he was about 18. he was, like, the first person i met who knew more electronics than i did at that point. we became good friends, because we shared an interest in computers and we had a sense of humor. we pulled all kinds of pranks together. playboy: for instance? jobs: [ grins ] normal stuff. like making a huge flag with a giant one of these on it. [ gives the finger ] the idea was that we would unfurl it in the middle of a school graduation. then there was the time wozniak made something that looked and sounded like a bomb and took it to the school cafeteria. we also went into the blue-box business together. playboy: those were illegal devices that allowed free long-distance phone calls, weren’t they? jobs: mm-hm. the famous story about the boxes is when woz called the vatican and told them he was henry kissinger. they had someone going to wake the pope up in the middle of the night before they figured out it wasn’t really kissinger. playboy: did you get into trouble for any of those things? jobs: well, i was thrown out of school a few times. playboy: were you then, or have you ever been, a computer nerd? jobs: i wasn’t completely in any one world for too long. there was so much else going on. between my sophomore and junior years, i got stoned for the first time; i discovered shakespeare, dylan thomas and all that classic stuff. i read moby dick and went back as a junior taking creative-writing classes. by the time i was a senior, i’d gotten permission to spend about half my time at stanford, taking classes. playboy: was wozniak obsessed at certain periods? jobs: [laughs] yes, but not just with computers. i think woz was in a world that nobody understood. no one shared his interests, and he was a little ahead of his time. it was very lonely for him. he’s driven from inner sights rather than external expectations of him, so he survived ok. woz and i are different in most ways, but there are some ways in which we’re the same, and we’re very close in those ways. we’re sort of like two planets in their own orbits that every so often intersect. it wasn’t just computers, either. woz and i very much liked bob dylan’s poetry, and we spent a lot of time thinking about a lot of that stuff. this was california. you could get lsd fresh made from stanford. you could sleep on the beach at night with your girlfriend. california has a sense of experimentation and a sense of openness—openness to new possibilities. besides dylan, i was interested in eastern mysticism, which hit the shores at about the same time. when i went to college at reed, in oregon, there was a constant flow of people stopping by, from timothy leary and, richard alpert to gary snyder. there was a constant flow of intellectual questioning about the truth of life. that was a time when every college student in this country read be here now and diet for a small planet —there were about ten books. you’d be hard pressed to find those books on too many college campuses today. i’m not saying it’s better or worse; it’s just different—very different. in search of excellence [the book about business practices] has taken the place of be here now . playboy: in retrospect, how did that influence what you’re doing now? jobs: the whole period had a huge influence. as it was clear that the sixties were over, it was also clear that a lot of the people who had gone through the sixties ended up not really accomplishing what they set out to accomplish, and because they had thrown their discipline to the wind, they didn’t have much to fall back on. many of my friends have ended up engrained with the idealism of that period but also with a certain practicality, a cautiousness about ending up working behind the counter in a natural-food store when they are 45, which is what they saw happen to some of their older friends. it’s not that that is bad in and of itself, but it’s bad if that’s not what you really wanted to do. playboy: after reed, you returned to silicon valley and answered a now-famous ad that boasted, “have fun and make money.” jobs: right. i decided i wanted to travel, but i was lacking the necessary funds. i came back down to get a job. i was looking in the paper and there was this ad that said, yes, “have fun and make money.” i called. it was atari. i had never had a job before other than the one when i was a kid. by some stroke of luck, they called me up the next day and hired me. playboy: that must have been at atari’s earliest stage. jobs: i was, like, employee number 40. it was a very small company. they had made pong and two other games. my first job was helping a guy named don work on a basketball game, which was a disaster. there was this basketball game, and somebody was working on a hockey game. they were trying to model all their games after simple field sports at that time, because pong was such a success. playboy: you never lost sight of the reason for the job: to earn money so you could travel. jobs: atari had shipped a bunch of games to europe and they had some engineering defects in them, and i figured out how to fix them, but it was necessary for somebody to go over there and actually do the fixing. i volunteered to go and asked to take a leave of absence when i was there. they let me do it. i ended up in switzerland and moved from zurich to new delhi. i spent some time in india. playboy: where you shaved your head. jobs: that’s not quite the way it happened. i was walking around in the himalayas and i stumbled onto this thing that turned out to be a religious festival. there was a baba, a holy man, who was the holy man of this particular festival, with his large group of followers. i could smell good food. i hadn’t been fortunate enough to smell good food for a long time, so i wandered up to pay my respects and eat some lunch. for some reason, this baba, upon seeing me sitting there eating, immediately walked over to me and sat down and burst out laughing. he didn’t speak much english and i spoke a little hindi, but he tried to carry on a conversation and he was just rolling on the ground with laughter. then he grabbed my arm and took me up this mountain trail. it was a little funny, because here were hundreds of indians who had traveled for thousands of miles to hang out with this guy for ten seconds and i stumble in for something to eat and he’s dragging me up this mountain path. we get to the top of this mountain half an hour later and there’s this little well and pond at the top of this mountain, and he dunks my head in the water and pulls out a razor from his pocket and starts to shave my head. i’m completely stunned. i’m 19 years old, in a foreign country, up in the himalayas, and here is this bizarre indian baba who has just dragged me away from the rest of the crowd, shaving my head atop this mountain peak. i’m still not sure why he did it. playboy: what did you do when you came back? jobs: coming back was more of a culture shock than going. well, atari called me up and wanted me to go back to work there. i didn’t really want to, but eventually they persuaded me to go back as a consultant. wozniak and i were hanging out. he took me to some homebrew computer club meetings, where computer hobbyists compared notes and stuff. i didn’t find them all that exciting, but some of them were fun. wozniak went religiously. playboy: what was the thinking about computers then? why were you interested? jobs: the clubs were based around a computer kit called the altair. it was so amazing to all of us that somebody had actually come up with a way to build a computer you could own yourself. that had never been possible. remember, when we were in high school, neither of us had access to a computer mainframe. we had to drive somewhere and have some large company take a benevolent attitude toward us and let us use the computer. but now, for the first time, you could actually buy a computer. the altair was a kit that came out around 1975 and sold for less than $400. even though it was relatively inexpensive, not everyone could afford one. that’s how the computer clubs started. people would band together and eventually become a club. playboy: what would you do with your makeshift computers? jobs: at that time, there were no graphics. it was all alphanumerics, and i used to be fascinated with the programming, simple programming. on the very early versions of computer kits, you didn’t even type; you threw switches that signaled characters. playboy: the altair, then, presented the concept of a home computer. jobs: it was just sort of a computer that you could own. they really didn’t know what to do with it. the first thing that they did was to put languages on it, so you could write some programs. people didn’t start to apply them for practical things until a year or two later, and then it was simple things, like bookkeeping. playboy: and you decided you could do the altair one better. jobs: it sort of just happened. i was working a lot at atari at night and i used to let woz in. atari put out a game called gran track, the first driving game with a steering wheel to drive it. woz was a gran track addict. he would put great quantities of quarters into these games to play them, so i would just let him in at night and let him onto the production floor and he would play gran track all night long. when i came up against a stumbling block on a project, i would get woz to take a break from his road rally for ten minutes and come and help me. he puttered around on some things, too. and at one point, he designed a computer terminal with video on it. at a later date, he ended up buying a microprocessor and hooking it up to the terminal and made what was to become the apple i. woz and i laid out the circuit board ourselves. that was basically it. playboy: again, the idea was just to do it? jobs: yeah, sure. and to be able to show it off to your friends. playboy: what triggered the next step—manufacturing and selling them to make money? jobs: woz and i raised $1,300 by selling my vw bus and his hewlett-packard calculator to finance them. a guy who started one of the first computer stores told us he could sell them if we could make them. it had not dawned on us until then. playboy: how did you and wozniak work together? jobs: he designed most of it. i helped on the memory part and i helped when we decided to turn it into a product. woz isn’t great at turning things into products, but he’s really a brilliant designer. playboy: the apple i was for hobbyists? jobs: completely. we sold only about 150 of them, ever. it wasn’t that big a deal, but we made about $95,000 and i started to see it as a business besides something to do. apple i was just a printed circuit board. there was no case, there was no power supply; it wasn’t much of a product yet. it was just a printed circuit board. you had to go out and buy transformers for it. you had to buy your own keyboard. [laughs] playboy: did you and wozniak have a vision once things started rolling? were you both thinking about how big it could get and how computers would be able to change the world? jobs: no, not particularly. neither of us had any idea that this would go anywhere. woz is motivated by figuring things out. he concentrated more on the engineering and proceeded to do one of his most brilliant pieces of work, which was the disk drive, another key engineering feat that made the apple ii a possibility. i was trying to build the company—trying to find out what a company was . i don’t think it would have happened without woz and i don’t think it would have happened without me. playboy: what happened to the partnership as time went on? jobs: the main thing was that woz was never really interested in apple as a company. he was just sort of interested in getting the apple ii on a printed circuit board so he could have one and be able to carry it to his computer club without having the wires break on the way. he had done that and decided to go on to other things. he had other ideas. playboy: such as the us festival rock concert and computer show, where he lost something like $10,000,000. jobs: well, i thought the us festival was a little crazy, but woz believed very strongly in it. playboy: how is it between the two of you now? jobs: when you work with somebody that close and you go through experiences like the ones we went through, there’s a bond in life. whatever hassles you have, there is a bond. and even though he may not be your best friend as time goes on, there’s still something that transcends even friendship, in a way. woz is living his own life now. he hasn’t been around apple for about five years. but what he did will go down in history. he’s going around speaking to a lot of computer events now. he likes that. playboy: the two of you went on to create the apple ii, which actually started the computer revolution. how did that occur? jobs: it wasn’t just us. we brought in other people. wozniak still did the logic of the apple ii, which certainly is a large part of it, but there were some other key parts. the power supply was really a key. the case was really a key. the real jump with the apple ii was that it was a finished product. it was the first computer that you could buy that wasn’t a kit. it was fully assembled and had its own case and its own keyboard, and you could really sit down and start to use it. and that was the breakthrough of the apple ii: that it looked like a real product. playboy: was the initial market hobbyists? jobs: the difference was that you didn’t have to be a hardware hobbyist with the apple ii. you could be a software hobbyist. that was one of the key breakthroughs with the apple ii: realizing that there were a whole lot more people who wanted to play with a computer, just like woz and me, than there were people who could build their own. that’s what the apple ii was all about. still, the first year, we sold only 3000 or 4000. playboy: even that sounds like a lot for a few guys who barely knew what they were doing. jobs: it was giant! we did about $200,000 when our business was in the, garage, in 1976. in 1977, about $7,000,000 in business. i mean, it was phenomenal! and in 1978, we did $17,000,000. in 1979, we did $47,000,000. that’s when we all really sensed that this was just going through the rafters. in 1980, we did $117,000,000. in 1981, we did $335,000,000. in 1982, we did $583,000,000. in 1983, we did $985,000,000, i think. this year, it will be a billion and a half. playboy: you don’t forget those numbers. jobs: well, they’re just yardsticks, you know. the neatest thing was, by 1979, i was able to walk into classrooms that had 15 apple computers and see the kids using them. and those are the kinds of things that are really the milestones. playboy: which brings us full circle to your latest milestones, the mac and your protracted shoot-out with ibm. in this interview , you’ve repeatedly sounded as if there really are only two of you left in the field. but although the two of you account for something like 60 percent of the market, can you just write off the other 40 percent—the radio shacks, decs, epsons, et al.—as insignificant? more important, are you ignoring your potentially biggest rival, at&t? jobs: at&t is absolutely going to be in the business. there is a major transformation in the company that’s taking place right now. at&t is changing from a subsidized and regulated service-oriented company to a free-market, competitive-marketing technology company. at&t’s products per se have never been of the highest quality. all you have to do is go look at their telephones. they’re somewhat of an embarrassment. but they do possess great technology in their research labs. their challenge is to learn how to commercialize that technology. also, they have to learn about consumer marketing. i think that they will do both of those things, but it’s going to take them years. playboy: are you writing them off as a threat? jobs: i don’t think they’re going to be a giant factor in the next 24 months, but they will learn. playboy: what about radio shack? jobs: radio shack is totally out of the picture. they have missed the boat. radio shack tried to squeeze the computer into their model of retailing, which in my opinion often meant selling second-rate products or low-end products in a surplus-store environment. the sophistication of the computer buyer passed radio shack by without their really realizing it. their market shares dropped through the floor. i don’t anticipate that they’re going to recover and again become a major player. playboy: how about xerox? texas instruments? dec? wang? jobs: xerox is out of the business. t.i. is doing nowhere near their expectations. as to some of the others, the large companies, like dec and wang, can sell to their installed bases. they can sell personal computers as advanced terminals, but that business is going to dwindle. playboy: how about the low-priced computers: commodore and atari? jobs: i consider those a brochure for why you should buy an apple ii or macintosh. i think people have already determined that the sub-$500 computers don’t do very much. they either tease people to want more or frustrate people completely. playboy: what about some of the smaller portables? jobs: they are ok if you’re a reporter and trying to take notes on the run. but for the average person, they’re really not that useful, and there’s not all that software for them, either. by the time you get your software done, a new one comes out with a slightly bigger display and your software is obsolete. so nobody is writing any software for them. wait till we do it—the power of a macintosh in something the size of a book! playboy: what about epson and some of the japanese computer makers? jobs: i’ve said it before: the japanese have hit the shores like dead fish. they’re just like dead fish washing up on the shores. the epson has been a failure in this market place. playboy: like computers, the automobile industry was an american industry that we almost lost to the japanese. there is a lot of talk about american semiconductor companies’ losing ground to japanese. how will you keep the edge? jobs: japan’s very interesting. some people think it copies things. i don’t think that anymore. i think what they do is reinvent things. they will get something that’s already been invented and study it until they thoroughly understand it. in some cases, they understand it better than the original inventor. out of that understanding, they will reinvent it in a more refined second-generation version. that strategy works only when what they’re working with isn’t changing very much—the stereo industry and the automobile industry are two examples. when the target is moving quickly, they find it very difficult, because that reinvention cycle takes a few years. as long as the definition of what a personal computer is keeps changing at the rate that it is, they will have a very hard time. once the rate of change slows down, the japanese will bring all of their strengths to bear on this market, because they absolutely want to dominate the computer business; there’s no question about that. they see that as a national priority. we think that in four to five years, the japanese will finally figure out how to build a decent computer. and if we’re going to keep this industry one in which america leads, we have four years to become world-class manufacturers. our manufacturing technology has to equal or surpass that of the japanese. playboy: how do you plan to accomplish that? jobs: at the time we designed macintosh, we also designed a machine to build the machine. we spent $20,000,000 building the computer industry’s most automated factory. but that’s not enough. rather than take seven years to write off our factory, as most companies would do, we’re writing it off in two. we will throw it away at the end of 1985 and build our second one, and we will write that off in two years and throw that away, so that three years from now, we’ll be on to our third automated factory. that’s the only way we can learn fast enough. playboy: it’s not all competition with the japanese: you buy your disk drives from sony, for instance. jobs: we buy many of our components from the japanese. we’re the largest user in the world of microprocessors, of high-technology ram chips, of disk drives, of keyboards. we save a ton of energy not having to make and design floppy-disk drives or microprocessors that we can spend on software. playboy: let’s talk about software. what are the revolutionary changes in software development as you’ve seen it in the past few years? jobs: certainly, the earlier programming, getting a programming language on a microprocessor chip, was a real breakthrough. visicalc was a breakthrough, because that was the first real use of computers in business, where business people could see tangible benefits of using one. before that, you had to program your own applications, and the number of people who want to program is a small fraction—one percent. coupled with visicalc, the ability to graph things, graph information, was important, and so was lotus. playboy: we’re dropping a lot of brand names with which people may not be familiar. please explain them. jobs: what lotus did was combine a good spread sheet and graphics program. the word-processing and data-base parts of lotus are certainly not the most robust that one can purchase. the real key to lotus was that it combined spread sheet and graphics in one program, so you could go between them very rapidly. the next breakthrough is happening now, thanks to the macintosh, which brought that lisa technology down to an affordable price. there exists, and there will be more, revolutionary software there. you generally want to truly evaluate a breakthrough a few years after it happens. playboy: what about word processing? you didn’t mention that on the list of breakthroughs. jobs: you’re right, i should have listed word processing after visicalc. word processing is the most universally needed application and one of the easiest to understand. it’s probably the first use to which most people put their personal computer. there were word processors before personal computers, but a word processor on a personal computer was more of an economic breakthrough, while there was never any form of visicalc before the personal computer. playboy: have there been breakthroughs in educational software? jobs: there has been a lot of very good software in education but not the breakthrough product, not the visicalc. i think that will come, but i don’t expect it in the next 24 months. playboy: you’ve stressed the fact that education is a high priority for you. how do you think computers are affecting it? jobs: computers themselves, and software yet to be developed, will revolutionize the way we learn. we formed something called the apple education foundation, and we give several million dollars in cash and equipment to people doing exploratory work with educational software and to schools that can’t afford computers. we also wanted macintosh to become the computer of choice in colleges, just as the apple ii is for grade and high schools. so we looked for six universities that were out to make large-scale commitments to personal computers—by large, meaning more than 1000 apiece—and instead of six, we found 24. we asked the colleges if they would invest at least $2,000,000 each to be part of the macintosh program. all 24—including the entire ivy league—did. so in less than a year, macintosh has become the standard in college computing. i could ship every macintosh we make this year just to those 24 colleges. we can’t, of course, but the demand is there. playboy: but the software isn’t there, is it? jobs: some of it’s there. what’s not there, the people at colleges are going to write themselves. ibm tried to stop us—i hear it formed a 400-person task force to do it—by giving away ibm pcs. but the colleges were fairly astute. they realized the software investment they were about to embark upon would far outweigh the hardware investment, and they didn’t want to spend all that software money on old technology like ibm’s. so in many cases, they turned down ibm’s offers and went with macintoshes. in some cases, they used ibm grant money to buy macintoshes. playboy: will you name some colleges? jobs: can’t. i’d get them in trouble. playboy: when you were in college in precomputer days, what did you and your classmates feel was the way to make a contribution? politics? jobs: none of the really bright people i knew in college went into politics. they all sensed that, in terms of making a change in the world, politics wasn’t the place to be in the late sixties and seventies. all of them are in business now—which is funny, because they were the same people who trekked off to india or who tried in one way or another to find some sort of truth about life. playboy: wasn’t business and the lure of money merely the easy choice in the end? jobs: no, none of those people care about the money. i mean, a lot of them made a lot of money, but they don’t really care . their lifestyles haven’t particularly changed. it was the chance to actually try something, to fail, to succeed, to grow. politics wasn’t the place to be these past ten years if you were eager to try things out. as someone who hasn’t turned 30 yet, i think your 20s are the time to be impatient, and a lot of these people’s idealism would have been deeply frustrated in politics; it would have been blunted. i think it takes a crisis for something to occur in america. and i believe there’s going to be a crisis of significant proportions in the early nineties as these problems our political leaders should have been addressing boil up to the surface. and that’s when a lot of these people are going to bring both their practical experience and their idealism into the political realm. you’re going to see the best-trained generation ever to go into politics. they’re going to know how to choose people, how to get things done, how to lead. playboy: doesn’t every generation say that? jobs: these are different times. the technological revolution is more intertwined every day with our economy and our society—more than 50 percent of america’s gross national product comes from information-based industries—and most political leaders today have had no background in that revolution. it’s going to become crucial that many of the larger decisions we make—how we allot our resources, how we educate our children—be made with an understanding of the technical issues and the directions the technology is taking. and that hasn’t begun happening yet. in education, for example, we have close to a national embarrassment. in a society where information and innovation are going to be pivotal, there really is the possibility that america can become a second-rate industrial nation if we lose the technical momentum and leadership we have now. playboy: you mentioned investing in education, but isn’t the problem finding the fiends in a time of soaring deficits? jobs: we’re making the largest investment of capital that humankind has ever made in weapons over the next five years. we have decided, as a society, that that’s where we should put our money, and that raises the deficits and, thus, the cost of our capital. meanwhile, japan, our nearest competitor on the next technological frontier—the semiconductor industry—has shaped its tax structure, its entire society, toward raising the capital to invest in that area. you get the feeling that connections aren’t made in america between things like building weapons and the fact that we might lose our semiconductor industry. we have to educate ourselves to that danger. playboy: and you think computers will help in that process. jobs: well, i’ll tell you a story. i saw a video tape that we weren’t supposed to see. it was prepared for the joint chiefs of staff. by watching the tape, we discovered that, at least as of a few years ago, every tactical nuclear weapon in europe manned by u.s. personnel was targeted by an apple ii computer. now, we didn’t sell computers to the military; they went out and bought them at a dealer’s, i guess. but it didn’t make us feel good to know that our computers were being used to target nuclear weapons in europe. the only bright side of it was that at least they weren’t [radio shack] trs-80s! thank god for that. the point is that tools are always going to be used for certain things we don’t find personally pleasing. and it’s ultimately the wisdom of people, not the tools themselves, that is going to determine whether or not these things are used in positive, productive ways. playboy: where do you see computers and software going in the near future? jobs: thus far, we’re pretty much using our computers as good servants. we ask them to do something, we ask them to do some operation like a spread sheet, we ask them to take our key strokes and make a letter out of them, and they do that pretty well. and you’ll see more and more perfection of that—computer as servant. but the next thing is going to be computer as guide or agent. and what that means is that it’s going to do more in terms of anticipating what we want and doing it for us, noticing connections and patterns in what we do, asking us if this is some sort of generic thing we’d like to do regularly, so that we’re going to have, as an example, the concept of triggers. we’re going to be able to ask our computers to monitor things for us, and when certain conditions happen, are triggered, the computers will take certain actions and inform us after the fact. playboy: for example? jobs: simple things like monitoring your stocks every hour or every day. when a stock gets beyond set limits, the computer will call my broker and electronically sell it and then let me know. another example is that at the end of the month, the computer will go into the data base and find all the salesmen who exceeded their sales quotas by more than 20 percent and write them a personalized letter from me and send it over the electronic mail system to them, and give me a report on who it sent the letters to each month. there will be a time when our computers have maybe 100 or so of those tasks; they’re going to be much more like an agent for us. you’re going to see that start to happen a little bit in the next 12 months, but really, it’s about three years away. that’s the next breakthrough. playboy: will we be able to perform all of those things on the hardware we have now? or are you going to charge us for new machines? jobs: all? that would be a dangerous statement, using the word all. i don’t know about that. macintosh was certainly designed with those concepts in mind. playboy: you take great pride in having apple keep ahead. how do you feel about the older companies that have to play catch-up with the younger companies—or perish? jobs: that’s inevitably what happens. that’s why i think death is the most wonderful invention of life. it purges the system of these old models that are obsolete. i think that’s one of apple’s challenges, really. when two young people walk in with the next thing, are we going to embrace it and say this is fantastic? are we going to be willing to drop our models, or are we going to explain it away? i think we’ll do better, because we’re completely aware of it and we make it a priority. playboy: in thinking about your success, did you ever get to the point where you slapped your head and asked yourself what was happening? after all, it was virtually overnight. jobs: i used to think about selling 1,000,000 computers a year, but it was just a thought. when it actually happens, it’s a totally different thing. so it was, “holy shit, it’s actually coming true!” but what’s hard to explain is that this does not feel like overnight. next year will be my tenth year. i had never done anything longer than a year in my life. six months, for me, was a long time when we started apple. so this has been my life since i’ve been sort of a free-willed adult. each year has been so robust with problems and successes and learning experiences and human experiences that a year is a lifetime at apple. so this has been ten lifetimes. playboy: do you know what you want to do with the rest of this lifetime? jobs: there’s an old hindu saying that comes into my mind occasionally: “for the first 30 years of your life, you make your habits. for the last 30 years of your life, your habits make you.” as i’m going to be 30 in february, the thought has crossed my mind. playboy: and? jobs: and i’m not sure. i’ll always stay connected with apple. i hope that throughout my life i’ll sort of have the thread of my life and the thread of apple weave in and out of each other, like a tapestry. there may be a few years when i’m not there, but i’ll always come back. and that’s what i may try to do. the key thing to remember about me is that i’m still a student. i’m still in boot camp. if anyone is reading any of my thoughts, i’d keep that in mind. don’t take it all too seriously. if you want to live your life in a creative way, as an artist, you have to not look back too much. you have to be willing to take whatever you’ve done and whoever you were and throw them away. what are we, anyway? most of what we think we are is just a collection of likes and dislikes, habits, patterns. at the core of what we are is our values, and what decisions and actions we make reflect those values. that is why it’s hard doing interviews and being visible: as you are growing and changing, the more the outside world tries to reinforce an image of you that it thinks you are, the harder it is to continue to be an artist, which is why a lot of times, artists have to go, “bye. i have to go. i’m going crazy and i’m getting out of here.” and they go and hibernate somewhere. maybe later they re-emerge a little differently. playboy: you could take off. you certainly don’t have to worry about money. you’re still working— jobs: [laughs] because of guilt. guilt over the money. playboy: let’s talk about the money. you were a millionaire at 23— jobs: and when i was 24, my net worth was more than $10,000,000; when i was 25, it was more than $100,000,000. playboy: what’s the main difference between having $1,000,000 and having several hundred million? jobs: visibility. the number of people who have a net worth of more than $1,000,000 in this country is in the tens of thousands. the number of people who have a net worth of more than $10,000,000 gets down to thousands. and the number who have a net worth of more than $100,000,000 gets down to a few hundred. playboy: what does the money actually mean to you? jobs: i still don’t understand it. it’s a large responsibility to have more than you can spend in your lifetime—and i feel i have to spend it. if you die, you certainly don’t want to leave a large amount to your children. it will just ruin their lives. and if you die without kids, it will all go to the government. almost everyone would think that he could invest the money back into humanity in a much more astute way than the government could. the challenges are to figure out how to live with it and to reinvest it back into the world, which means either giving it away or using it to express your concerns or values. playboy: so what do you do? jobs: that’s a part of my life that i like to keep private. when i have some time, i’m going to start a public foundation. i do some things privately now. playboy: you could spend all of your time disbursing your money. jobs: oh, you have to. i’m convinced that to give away a dollar effectively is harder than to make a dollar. playboy: could that be an excuse to put off doing something? jobs: no. there are some simple reasons for that. one is that in order to learn how to do something well, you have to fail sometimes. in order to fail, there has to be a measurement system. and that’s the problem with most philanthropy—there’s no measurement system. you give somebody some money to do something and most of the time you can really never measure whether you failed or succeeded in your judgment of that person or his ideas or their implementation. so if you can’t succeed or fail, it’s really hard to get better. also, most of the time, the people who come to you with ideas don’t provide the best ideas. you go seek the best ideas out, and that takes a lot of time. playboy: if you plan to use your visibility to create a model for people, why is this one of the areas you choose not to discuss? jobs: because i haven’t done anything much yet. in that area, actions should speak the loudest. playboy: are you completely virtuous or do you admit to any extravagances? jobs: well, my favorite things in life are books, sushi and.… my favorite things in life don’t cost any money. it’s really clear that the most precious resource we all have is time. as it is, i pay a price by not having much of a personal life. i don’t have the time to pursue love affairs or to tour small towns in italy and sit in cafés and eat tomato-and-mozzarella salad. occasionally, i spend a little money to save myself a hassle, which means time. and that’s the extent of it. i bought an apartment in new york, but it’s because i love that city. i’m trying to educate myself, being from a small town in california, not having grown up with the sophistication and culture of a large city. i consider it part of my education. you know, there are many people at apple who can buy everything that they could ever possibly want and still have most of their money unspent. i hate talking about this as a problem; people are going to read this and think, yeah, well, give me your problem. they’re going to think i’m an arrogant little asshole. playboy: with your wealth and past accomplishments, you have the ability to pursue dreams as few others do. does that freedom frighten you? jobs: the minute you have the means to take responsibility for your own dreams and can be held accountable for whether they come true or not, life is a lot tougher. it’s easy to have wonderful thoughts when the chance to implement them is remote. when you’ve gotten to a place where you at least have a chance of implementing your ideas, there’s a lot more responsibility in that. playboy: we’ve talked about what you see in the near future; what about the far future? if we’re still in kindergarten, and you start imagining some of the ways computers are going to change our lives, what do you see? jobs: when i came back from india, i found myself asking, what was the one most important thing that had struck me? and i think it was that western rational thought is not an innate human characteristic. it is a learned ability. it had never occurred to me that if no one taught us how to think this way, we would not think this way. and yet, that’s the way it is. obviously, one of the great challenges of an education is to teach us how to think. what we’re finding is that computers are actually going to affect the quality of thinking as more and more of our children have these tools available to them. humans are tool users. what’s really incredible about a book is that you can read what aristotle wrote. you don’t have to have some teacher’s interpretation of aristotle. you can certainly get that, but you can read exactly what aristotle wrote. that direct transmission of thoughts and ideas is one of the key building blocks of why we are where we are, as a society. but the problem with a book is that you can’t ask aristotle a question. i think one of the potentials of the computer is to somehow…capture the fundamental, underlying principles of an experience. playboy: for example? jobs: here’s a very crude example. the original video game, pong, captured the principles of gravity, angular momentum and things like that, to where each game obeyed those underlying principles, and yet every game was different—sort of like life. that’s the simplest example. and what computer programming can do is to capture the underlying principles, the underlying essence, and then facilitate thousands of experiences based on that perception of the underlying principles. now, what if we could capture aristotle’s world view—the underlying principles of his world view? then you could actually ask aristotle a question. ok. you might say it would not be exactly what aristotle was. it could be all wrong. but maybe not. playboy: but you would say it was at least interesting feedback. jobs: exactly. part of the challenge, i think, is to get these tools to millions and tens of millions of people and to start to refine these tools so that someday we can crudely, and then in a more refined sense, capture an aristotle or an einstein or a land while he’s alive. imagine what that could be like for a young kid growing up. forget the young kid—for us! and that’s part of the challenge. playboy: will you be working on that yourself? jobs: that’s for someone else. it’s for the next generation. i think an interesting challenge in this area of intellectual inquiry is to grow obsolete gracefully, in the sense that things are changing so fast that certainly by the end of the eighties, we really want to turn over the reins to the next generation, whose fundamental perceptions are state-of-the-art perceptions, so that they can go on, stand on our shoulders and go much further. it’s a very interesting challenge, isn’t it? how to grow obsolete with grace. > get staff picks delivered weekly to your inbox: subscribe get our ios app --> contact editors@longform.org fiction@longform.org sponsor@longform.org subscribe rss podcast rss podcast in itunes connect about twitter facebook know a story we should include on longform? make a suggestion . × suggest a story close suggest another story send suggestion > > > > > > > > > ","createdAt":1412717706365,"_id":"KQKfRAZJiuzgNHET"}
